<?xml version="1.0" encoding="utf-8" ?>
<Books>
  
  <INTRODUCTION>
  <HTML>
    <BODY>
      <H1>  What is SQL?</H1>
      <hr/>
      <br/>
      <FONT SIZE="5">
        SQL (pronounced "ess-que-el") stands for Structured Query Language. SQL is used to communicate with a database.
        According to ANSI (American National Standards Institute), it is the standard language for relational database
        management systems. SQL statements are used to perform tasks such as update data on a database, or retrieve da
        ta from a database. Some common relational database management systems that use SQL are: Oracle, Sybase, Microsft
         SQL Server, Access, Ingres, etc. Although most database systems use SQL, most of them also have their own add
        itional proprietary extensions that are usually only used on their system. However, the standard SQL commands such
        as "Select", "Insert", "Update", "Delete", "Create", and "Drop" can be used to accomplish almost everything that one
        needs to do with a database. This tutorial will provide you with the instruction on the basics of each of these
        commands as well as allow you to put them to practice using the SQL Interpreter.
        <br/><br/>
        -->SQL stands for Structured Query Language<br/>
        -->SQL lets you access and manipulate databases<br/>
        -->SQL is an ANSI (American National Standards Institute) standard<br/><br/>
      </FONT>
        <h1>What Can SQL do?</h1>
      <hr/>
      <br/>
        <FONT SIZE="5">
          -->SQL can execute queries against a database<br/>
          -->SQL can retrieve data from a database<br/>
          -->SQL can insert records in a database<br/>
          -->SQL can update records in a database<br/>
          -->SQL can delete records from a database<br/>
          -->SQL can create new databases<br/>
          -->SQL can create new tables in a database<br/>
          -->SQL can create stored procedures in a database<br/>
          -->SQL can create views in a database<br/>
        </FONT>
     
    </BODY>
  </HTML>
  </INTRODUCTION>

  <RDBMS>
    <html>
      <body>
        <h1>
          What Is a Relational Database?
        </h1>
        <hr/>
        <br/>

        <font size="5">

          In simple terms, a relational database is a set of tables.2 Each table keeps information
          about aspects of one thing, such as a customer, an order, a product, a team, or a tournament. It is possible to set up constraints on the data in individual tables and also between tables. For example, when designing the database, we might specify that an order entered in the Order table must exist for a customer who exists in the Customer table. How the tables are interrelated can be usefully depicted with a data model.



        </font>
     
    </body>
    </html>

  </RDBMS>

  <OVERVIEW>
    <html>
      <body>
        <h1>
          Introducing Tables
        </h1>
        <hr/>
        <br/>

        <font size="5">

          The earlier description of a relational database as a set of tables was a little oversimplified. A more accurate definition is that a relational database is a set of relations. When people refer to tables in a relational database, they generally assume (whether they know it or
          not) that they are dealing with relations. The reason for the distinction between tables and relations is that there is a well-defined set of operations on relations that allow them to be combined and manipulated in various ways.5 This is exactly what we need in order to be able to extract accurate information from a database. We won’t be covering the actual
          mathematics in this book, but we will be using the operations. So, in nonmathematical speak, what is so special about relations?
          One of the most important features of a relation is that it is a set of unique rows.6 No
          two rows in a relation can have identical values for every attribute. A table does not gener-
          ally have this restriction. If we consider our member data, it is clear why this uniqueness
          constraint is so important. If, in the table in Figure 1-2, we had two identical rows (say for
          Brenda Nolan), we would have no way to differentiate them. We might associate a team
          with one row and a subscription payment with the other, thereby generating all sorts of
          confusion.
          The way that a relational database maintains the uniqueness of rows is by specifying
          a primary key. A primary key is an attribute, or set of attributes, that is guaranteed to be
          different in every row of a given relation. For data such as the member data in this example,
          we cannot guarantee that all our members will have different names or addresses (a dad
          and son may share a name and an address and both belong to the club). To help distin-
          guish different members, we have included an ID number as one of the member attributes, or
          fields. You will find that adding an identifying number (colloquially referred to as a surrogate
          key) is very common in database tables. If MemberID is defined as the primary key for the
          Member table, then the database system will ensure that in every row the value of MemberID
          is different. The system will also ensure that the primary key field always has a value. That
          is, we can never enter a row that has an empty MemberID field. These two requirements for
          a primary key field (uniqueness and not being empty) ensure that given the value of MemberID,
          we can always find a single row that represents that member. We will see that this is very
          important when we start establishing relationships between tables later in this chapter.
          Once a table has a primary key nominated, then it satisfies the uniqueness requirement of
          a relation.
          Another feature of a relation is that each attribute (or column) has a domain. A domain
          is a set of allowed values and might be something very general. For example, the domain
          for the FirstName attribute in the Member table is just any string of characters, for example,
          “Michael” or “Helen.” The domain for columns storing dates might be any valid date (so
          that February 29 is allowed only in leap years), whereas for columns keeping quantities,
          the domain might be integer values greater than 0. All database systems have built-in
          domains or types such as text, integer, or date that can be chosen for each of the fields in
          a table. Systems vary as to whether users can define their own more highly specified domains
          that they can use across different tables; however, all good database systems allow the
          designer to specify constraints on a particular attribute in a table. For example, in a partic-
          ular table we might specify that a birth date is a date in the past, that the value for a gender
          field must be “M” or “F”, or that a student’s exam mark is between 0 and 100. The idea of
          domains becomes important for queries when we need to compare values of columns in
          different tables.
          When I refer to a database table in this book, I mean a set of rows with a nominated primary key to ensure every row is different and where every column has a domain of allowed values. Listing 1-1 shows the SQL code for creating the Member table with the attribute names and domains specified. In SQL, the keyword INT means an integer or nonfractional number, and CHAR(n) means a string of characters n long. The code also specifies that MemberID will be the primary key. (Listing 1-1 doesn’t create the relationship with the Team table yet.) The code is fairly self-explanatory.
<br/><br/>
          Listing 1-1. SQL to Create the Member Table<br/>
          CREATE TABLE Member  (<br/>
          MemberID INT PRIMARY KEY,<br/>
          LastName CHAR(20),<br/>
          FirstName CHAR(20),<br/>
          Phone CHAR(20),<br/>
          Handicap INT,<br/>
          JoinDate DATETIME,<br/>
          Gender CHAR(1))<br/>
          
        </font>

      </body>
    </html>
  </OVERVIEW>

  <SELECT>
    <html>
      <body>
        <h1>
          The SQL SELECT Statement
        </h1>
        <hr/>
        <br/>

        <font size="5">
         

          The SELECT statement is used to select data from a database.

          The result is stored in a result table, called the result-set.

          SQL SELECT Syntax

          SELECT column_name(s)
          FROM table_name
          and

          SELECT * FROM table_name
          Note: SQL is not case sensitive. SELECT is the same as select.

         <H1> An SQL SELECT Example</H1>

          The "Persons" table:
<pre>
          P_Id	 LastName	   FirstName	Address	     City<BR/>
          -------------------------------------------------------<BR/>
          1	     Hansen      Ola	      Timoteivn 10	Sandnes<BR/>
          2	     Svendson    Tove	      Borgvn 23	    Sandnes<BR/>
          3	     Pettersen   Kari	      Storgt 20	    Stavanger<BR/><BR/>
        </pre>
          <pre>
                                                                                                          .
          </pre>
          <p/>
           
           Now we want to select the content of the columns named "LastName" <br/> and "FirstName" from the table above.

          We use the following SELECT statement:<BR/>

          <pre> SELECT LastName,FirstName FROM Persons<BR/>
          </pre><br/>
          The result-set will look like this:<BR/>
          <pre>
          LastName	FirstName<br/>
          -----------------------<br/>
          Hansen	        Ola<br/>
          Svendson	   Tove<br/>
          Pettersen	   Kari<br/><br/>
          </pre>
          <br/>
          <pre>
                                                                                                       .
          </pre>
         
            <h1>SELECT * Example</h1>
         
          <br/> Now we want to select all the columns from the "Persons" table.<br/>

          We use the following SELECT statement:<br/>

          <pre>SELECT * FROM Persons<br/>
          </pre>
          <br/>
          Tip: The asterisk (*) is a quick way of selecting all columns!<BR/>

          The result-set will look like this:<br/>
          <pre>
           P_Id	 LastName	   FirstName	Address	       City<br/>
          -------------------------------------------------------<br/>
          1	     Hansen      Ola	      Timoteivn 10	Sandnes<br/>
          2	     Svendson    Tove	      Borgvn 23	    Sandnes<br/>
          3	     Pettersen   Kari	      Storgt 20	    Stavanger<br/><br/>
          </pre>
        </font>

      </body>
    </html>
  </SELECT>

  <INSERT>
    <html>
      <body>
        <h1>
          The INSERT INTO Statement
        </h1>
        <hr/>
        <br/>

        <font size="5">


          The INSERT INTO statement is used to insert a new row in a table.

          <H1>SQL INSERT INTO Syntax</H1><br/>

          It is possible to write the INSERT INTO statement in two forms.

          The first form doesn't specify the column names where the data will be inserted, only their values:
          <pre>
            INSERT INTO table_name
            VALUES (value1, value2, value3,...)
            The second form specifies both the column names and the values to be inserted:

            INSERT INTO table_name (column1, column2, column3,...)
            VALUES (value1, value2, value3,...)
          </pre>

          <h1>    SQL INSERT INTO Example</h1>

          We have the following "Persons" table:

          <pre>
            P_Id	 LastName	   FirstName	Address	       City<br/>
            -------------------------------------------------------<br/>
            1	     Hansen      Ola	      Timoteivn 10	Sandnes<br/>
            2	     Svendson    Tove	      Borgvn 23	    Sandnes<br/>
            3	     Pettersen   Kari	      Storgt 20	    Stavanger<br/><br/>
          </pre>
          <pre>
            .
          </pre>
         
           Now we want to insert a new row in the "Persons" table.

          <br/> use the following SQL statement:
          <pre>
            INSERT INTO Persons
            VALUES (4,'Nilsen', 'Johan', 'Bakken 2', 'Stavanger')
          </pre>
          <br/>   The "Persons" table will now look like this:

          <pre>
            P_Id	 LastName	   FirstName	Address	       City<br/>
            -------------------------------------------------------------<br/>
            1	     Hansen      Ola	      Timoteivn 10	Sandnes<br/>
            2	     Svendson    Tove	      Borgvn 23	    Sandnes<br/>
            3	     Pettersen   Kari	      Storgt 20	    Stavanger<br/>
            4      Nilsen	     Johan	    Bakken 2	    Stavanger<br/><br/>
          </pre>
          <pre>
            .
          </pre>

          
           Insert Data Only in Specified Columns

          <br/>It is also possible to only add data in specific columns.

          <br/>The following SQL statement will add a new row, but only add data in the "P_Id", "LastName" and the "FirstName" columns:
<pre>
          INSERT INTO Persons (P_Id, LastName, FirstName)
          VALUES (5, 'Tjessem', 'Jakob')
     </pre>
          <br/> The "Persons" table will now look like this:

          <pre>
          P_Id	 LastName	   FirstName	Address	       City<br/>
          ------------------------------------------------------------<br/>
          1	     Hansen      Ola	      Timoteivn 10	Sandnes<br/>
          2	     Svendson    Tove	      Borgvn 23	    Sandnes<br/>
          3	     Pettersen   Kari	      Storgt 20	    Stavanger<br/>
          4      Nilsen	     Johan	     Bakken 2	    Stavanger<br/>
          5	     Tjessem	   Jakob                              <br/><br/>
        </pre>
         
          

        </font>

      </body>
    </html>
    
  </INSERT>

  <UPDATE>
    <html>
      <body>
        <h1>
          The UPDATE Statement
        </h1>
        <hr/>
        <br/>

        <font size="5">
         

          The UPDATE statement is used to update existing records in a table.
<br/>
          <H1>SQL UPDATE Syntax</H1>
          <pre>
          UPDATE table_name
          SET column1=value, column2=value2,...
          WHERE some_column=some_value
          
          </pre>
          
          Note: Notice the WHERE clause in the UPDATE syntax. The WHERE clause specifies which record or records that should be updated. If you omit the WHERE clause, all records will be updated!

<br/>
          <h1>     SQL UPDATE Example</h1>

          The "Persons" table:<br/>

          <pre>
            P_Id	LastName	FirstName	 Address	     City
            ----------------------------------------------
            1	    Hansen	    Ola	    Timoteivn 10	Sandnes
            2   	Svendson	  Tove	  Borgvn 23	    Sandnes
            3	    Pettersen	  Kari	  Storgt 20	    Stavanger
            4	    Nilsen	    Johan	  Bakken 2	    Stavanger
            5	    Tjessem	    Jakob
            
          </pre>
          
          Now we want to update the person "Tjessem, Jakob" in the "Persons" table.<br/>

          We use the following SQL statement:<br/>

          <pre>
          UPDATE Persons
          SET Address='Nissestien 67', City='Sandnes'
          WHERE LastName='Tjessem' AND FirstName='Jakob'
          
          </pre>
         
          The "Persons" table will now look like this:<br/>
          <pre>
          P_Id	LastName	FirstName  	Address	       City
          ------------------------------------------------
          1	     Hansen	    Ola	    Timoteivn 10	  Sandnes
          2   	 Svendson	  Tove	  Borgvn 23	      Sandnes
          3	     Pettersen	Kari	  Storgt 20	      Stavanger
          4	     Nilsen	    Johan	  Bakken 2	      Stavanger
          5	     Tjessem	  Jakob	  Nissestien 67	  Sandnes

          </pre>
          
          <h1>SQL UPDATE Warning</h1>
          <br/>
          Be careful when updating records. If we had omitted the WHERE clause in the example above, like this:
<pre>
  UPDATE Persons
  SET Address='Nissestien 67', City='Sandnes'
  
</pre>
         
          The "Persons" table would have looked like this:
<pre>
          P_Id	LastName	FirstName	  Address      City
          ---------------------------------------------------
          1	    Hansen	   Ola	   Nissestien 67	Sandnes
          2	    Svendson	 Tove	   Nissestien 67	Sandnes
          3	    Pettersen	 Kari	   Nissestien 67	Sandnes
          4	    Nilsen	   Johan	 Nissestien 67	Sandnes
          5	    Tjessem	   Jakob	 Nissestien 67	Sandnes
</pre>
        </font>

      </body>
    </html>
  </UPDATE>

  <DELETE>
    <html>
      <body>
        <h1>
          The DELETE Statement
        </h1>

        <font size="5">
          

          The DELETE statement is used to delete rows in a table.<BR/>


          <h1>SQL DELETE Syntax</h1>
          <br/>

          <table class="code notranslate" cellspacing="0" cellpadding="0" border="0" width="100%">

            <tr>
              <td>
                DELETE FROM table_name<br />

                WHERE some_column=some_value
              </td>
            </tr>
          </table>
          <br/>
          Note: Notice the WHERE clause in the DELETE syntax. The WHERE clause specifies which record or records that should be deleted. If you omit the WHERE clause, all records will be deleted!
          <br/>
          <h1>SQL DELETE Example</h1>
          <br/>

          The "Persons" table: 
          <br/>

         <table class="reference" cellspacing="0" cellpadding="0" border="1" width="100%">

          <tr>

            <th align="left">P_Id</th>

            <th align="left">LastName</th>

            <th align="left">FirstName</th>

            <th align="left">Address</th>

            <th align="left">City</th>

          </tr>

          <tr>

            <td>1</td>

            <td>Hansen</td>

            <td>Ola</td>

            <td>Timoteivn 10</td>

            <td>Sandnes</td>

          </tr>

          <tr>

            <td>2</td>

            <td>Svendson</td>

            <td>Tove</td>

            <td>Borgvn 23</td>

            <td>Sandnes</td>

          </tr>

          <tr>

            <td>3</td>

            <td>Pettersen</td>

            <td>Kari</td>

            <td>Storgt 20</td>

            <td>Stavanger</td>

          </tr>

          <tr>

            <td>4</td>

            <td>Nilsen</td>

            <td>Johan</td>

            <td>Bakken 2</td>

            <td>Stavanger</td>

          </tr>

          <tr>

            <td>5</td>

            <td>Tjessem</td>

            <td>Jakob</td>

            <td>Nissestien 67</td>

            <td>Sandnes</td>

          </tr>

        </table>
          <br/>
        Now we want to delete the person "Tjessem, Jakob" in the "Persons" table.<br/>

          We use the following SQL statement:<br/>
          <table class="code notranslate" cellspacing="0" cellpadding="0" border="0" width="100%">

            <tr>
              <td>
                DELETE FROM Persons<br/>

                WHERE LastName='Tjessem' AND FirstName='Jakob'
              </td>
            </tr>
          </table>
          <br/>
          The "Persons" table will now look like this:<br/>
<table class="reference" cellspacing="0" cellpadding="0" border="1" width="100%">

          <tr>

            <th align="left">P_Id</th>

            <th align="left">LastName</th>

            <th align="left">FirstName</th>

            <th align="left">Address</th>

            <th align="left">City</th>

          </tr>

          <tr>

            <td>1</td>

            <td>Hansen</td>

            <td>Ola</td>

            <td>Timoteivn 10</td>

            <td>Sandnes</td>

          </tr>

          <tr>

            <td>2</td>

            <td>Svendson</td>

            <td>Tove</td>

            <td>Borgvn 23</td>

            <td>Sandnes</td>

          </tr>

          <tr>

            <td>3</td>

            <td>Pettersen</td>

            <td>Kari</td>

            <td>Storgt 20</td>

            <td>Stavanger</td>

          </tr>

          <tr>

            <td>4</td>

            <td>Nilsen</td>

            <td>Johan</td>

            <td>Bakken 2</td>

            <td>Stavanger</td>

          </tr>

        </table>

        <br />

        <h1>Delete All Rows</h1>
          <br/>
It is possible to delete all rows in a table without deleting the table. This means that the table structure, attributes, and indexes will be intact:
<br/>
          <table class="code notranslate" cellspacing="0" cellpadding="0" border="0" width="100%">

            <tr>
              <td>
                DELETE FROM table_name<br /><br />

                or<br /><br />

                DELETE * FROM table_name
              </td>
            </tr>
          </table><br/>
Note: Be very careful when deleting records. You cannot undo this statement!

</font>

      </body>
    </html>
    
  </DELETE>

  <DISTINCT>
    <html>
      <body>
        <h1>
          The SQL SELECT DISTINCT Statement
        </h1>

        <font size="5">
         

          <p>In a table, some of the columns may contain duplicate values. This is not a problem, however, sometimes you will want to list only the different (distinct) values in a table.</p>

          <p>The DISTINCT keyword can be used to return only distinct (different) values.</p>



          <h1>SQL SELECT DISTINCT Syntax</h1>
          <br/>
          <table class="code notranslate" cellspacing="0" cellpadding="0" border="0" width="100%">

            <tr>
              <td>
                SELECT DISTINCT column_name(s)<br />

                FROM table_name
              </td>
            </tr>
          </table>

          <br />

          <hr />



          <h1>SELECT DISTINCT Example</h1>

          <p>The &quot;Persons&quot; table:</p>

          <table class="reference" cellspacing="0" cellpadding="0" border="1" width="100%">

            <tr>

              <th align="left">P_Id</th>

              <th align="left">LastName</th>

              <th align="left">FirstName</th>

              <th align="left">Address</th>

              <th align="left">City</th>

            </tr>

            <tr>

              <td>1</td>

              <td>Hansen</td>

              <td>Ola</td>

              <td>Timoteivn 10</td>

              <td>Sandnes</td>

            </tr>

            <tr>

              <td>2</td>

              <td>Svendson</td>

              <td>Tove</td>

              <td>Borgvn 23</td>

              <td>Sandnes</td>

            </tr>

            <tr>

              <td>3</td>

              <td>Pettersen</td>

              <td>Kari</td>

              <td>Storgt 20</td>

              <td>Stavanger</td>

            </tr>

          </table>

          <p>Now we want to select only the distinct values from the column named &quot;City&quot; from the table above.</p>

          <p>We use the following SELECT statement:</p>



          <table class="code notranslate" cellspacing="0" cellpadding="0" border="0" width="100%">

            <tr>
              <td>SELECT DISTINCT City FROM Persons</td>
            </tr>
          </table>



          <p>The result-set will look like this:</p>

          <table class="reference" cellspacing="0" cellpadding="0" border="1" width="50%">

            <tr>

              <th align="left">City</th>

            </tr>

            <tr>

              <td>Sandnes</td>

            </tr>

            <tr>

              <td>Stavanger</td>

            </tr>

          </table>

          <br />

          <table class="chapter" border="0" width="100%" cellspacing="0" cellpadding="0">
           
          </table>



          <hr />


        </font>

      </body>
    </html>
    
  </DISTINCT>

  <AND>
    <html>
      <body>
        <h1>
          AND Operator Example
        </h1>

        <font size="5">
          

          <p>The &quot;Persons&quot; table:</p>

          <table class="reference" cellspacing="0" cellpadding="0" border="1" width="100%">

            <tr>

              <th align="left">P_Id</th>

              <th align="left">LastName</th>

              <th align="left">FirstName</th>

              <th align="left">Address</th>

              <th align="left">City</th>

            </tr>

            <tr>

              <td>1</td>

              <td>Hansen</td>

              <td>Ola</td>

              <td>Timoteivn 10</td>

              <td>Sandnes</td>

            </tr>

            <tr>

              <td>2</td>

              <td>Svendson</td>

              <td>Tove</td>

              <td>Borgvn 23</td>

              <td>Sandnes</td>

            </tr>

            <tr>

              <td>3</td>

              <td>Pettersen</td>

              <td>Kari</td>

              <td>Storgt 20</td>

              <td>Stavanger</td>

            </tr>

          </table>

          <p>Now we want to select only the persons with the first name equal to &quot;Tove&quot; AND the last name equal to &quot;Svendson&quot;:</p>

          <p>We use the following SELECT statement:</p>



          <table class="code notranslate" cellspacing="0" cellpadding="0" border="0" width="100%">

            <tr>
              <td>
                SELECT * FROM Persons<br />

                WHERE FirstName='Tove'<br />

                AND LastName='Svendson'
              </td>
            </tr>
          </table>



          <p>The result-set will look like this:</p>

          <table class="reference" cellspacing="0" cellpadding="0" border="1" width="100%">

            <tr>

              <th align="left">P_Id</th>

              <th align="left">LastName</th>

              <th align="left">FirstName</th>

              <th align="left">Address</th>

              <th align="left">City</th>

            </tr>

            <tr>

              <td>2</td>

              <td>Svendson</td>

              <td>Tove</td>

              <td>Borgvn 23</td>

              <td>Sandnes</td>

            </tr>

          </table>

          <br />

          <hr />



          <h1> OR Operator Example</h1>

          <p>Now we want to select only the persons with the first name equal to &quot;Tove&quot; OR the first name equal to &quot;Ola&quot;:</p>

          <p>We use the following SELECT statement:</p>



          <table class="code notranslate" cellspacing="0" cellpadding="0" border="0" width="100%">

            <tr>
              <td>
                SELECT * FROM Persons<br />

                WHERE FirstName='Tove'<br />

                OR FirstName='Ola'
              </td>
            </tr>
          </table>



          <p>The result-set will look like this:</p>

          <table class="reference" cellspacing="0" cellpadding="0" border="1" width="100%">

            <tr>

              <th align="left">P_Id</th>

              <th align="left">LastName</th>

              <th align="left">FirstName</th>

              <th align="left">Address</th>

              <th align="left">City</th>

            </tr>

            <tr>

              <td>1</td>

              <td>Hansen</td>

              <td>Ola</td>

              <td>Timoteivn 10</td>

              <td>Sandnes</td>

            </tr>

            <tr>

              <td>2</td>

              <td>Svendson</td>

              <td>Tove</td>

              <td>Borgvn 23</td>

              <td>Sandnes</td>

            </tr>

          </table>

          <br />

          <hr />



          <h1>Combining AND &amp; OR</h1>

          <p>You can also combine AND and OR (use parenthesis to form complex expressions).</p>

          <p>
            Now we want to select only the persons with the last name equal to Svendson

            AND the first name equal to Tove OR to Ola:
          </p>

          <p>We use the following SELECT statement:</p>



          <table class="code notranslate" cellspacing="0" cellpadding="0" border="0" width="100%">

            <tr>
              <td>
                SELECT * FROM Persons WHERE<br />

                LastName='Svendson'<br />

                AND (FirstName='Tove' OR FirstName='Ola')
              </td>
            </tr>
          </table>



          <p>The result-set will look like this:</p>

          <table class="reference" cellspacing="0" cellpadding="0" border="1" width="100%">

            <tr>

              <th align="left">P_Id</th>

              <th align="left">LastName</th>

              <th align="left">FirstName</th>

              <th align="left">Address</th>

              <th align="left">City</th>

            </tr>

            <tr>

              <td>2</td>

              <td>Svendson</td>

              <td>Tove</td>

              <td>Borgvn 23</td>

              <td>Sandnes</td>

            </tr>

          </table>


        </font>

      </body>
    </html>
  </AND>

  <ORDER_BY>
    <html>
      <body>
        <h1>
          The ORDER BY Keyword
        </h1>

        <font size="5">
          

          <p>The ORDER BY keyword is used to sort the result-set by a specified column.</p>

          <p>The ORDER BY keyword sort the records in ascending order by default.</p>

          <p>If you want to sort the records in a descending order, you can use the DESC keyword.</p>



          <h3>SQL ORDER BY Syntax</h3>

          <table class="code notranslate" cellspacing="0" cellpadding="0" border="0" width="100%">

            <tr>
              <td>
                SELECT column_name(s)<br />

                FROM table_name<br />

                ORDER BY column_name(s) ASC|DESC
              </td>
            </tr>
          </table>

          <br />

          <hr />



          <h1>ORDER BY Example</h1>

          <p>The &quot;Persons&quot; table:</p>

          <table class="reference" cellspacing="0" cellpadding="0" border="1" width="100%">

            <tr>

              <th align="left">P_Id</th>

              <th align="left">LastName</th>

              <th align="left">FirstName</th>

              <th align="left">Address</th>

              <th align="left">City</th>

            </tr>

            <tr>

              <td>1</td>

              <td>Hansen</td>

              <td>Ola</td>

              <td>Timoteivn 10</td>

              <td>Sandnes</td>

            </tr>

            <tr>

              <td>2</td>

              <td>Svendson</td>

              <td>Tove</td>

              <td>Borgvn 23</td>

              <td>Sandnes</td>

            </tr>

            <tr>

              <td>3</td>

              <td>Pettersen</td>

              <td>Kari</td>

              <td>Storgt 20</td>

              <td>Stavanger</td>

            </tr>

            <tr>

              <td>4</td>

              <td>Nilsen</td>

              <td>Tom</td>

              <td>Vingvn 23</td>

              <td>Stavanger</td>

            </tr>

          </table>

          <p>Now we want to select all the persons from the table above, however, we want to sort the persons by their last name.</p>

          <p>We use the following SELECT statement:</p>



          <table class="code notranslate" cellspacing="0" cellpadding="0" border="0" width="100%">

            <tr>
              <td>
                SELECT * FROM Persons<br />

                ORDER BY LastName
              </td>
            </tr>
          </table>



          <p>The result-set will look like this:</p>

          <table class="reference" cellspacing="0" cellpadding="0" border="1" width="100%">

            <tr>

              <th align="left">P_Id</th>

              <th align="left">LastName</th>

              <th align="left">FirstName</th>

              <th align="left">Address</th>

              <th align="left">City</th>

            </tr>

            <tr>

              <td>1</td>

              <td>Hansen</td>

              <td>Ola</td>

              <td>Timoteivn 10</td>

              <td>Sandnes</td>

            </tr>

            <tr>

              <td>4</td>

              <td>Nilsen</td>

              <td>Tom</td>

              <td>Vingvn 23</td>

              <td>Stavanger</td>

            </tr>

            <tr>

              <td>3</td>

              <td>Pettersen</td>

              <td>Kari</td>

              <td>Storgt 20</td>

              <td>Stavanger</td>

            </tr>

            <tr>

              <td>2</td>

              <td>Svendson</td>

              <td>Tove</td>

              <td>Borgvn 23</td>

              <td>Sandnes</td>

            </tr>

          </table>

          <br />

          <hr />



          <h1>ORDER BY DESC Example</h1>

          <p>Now we want to select all the persons from the table above, however, we want to sort the persons descending by their last name.</p>

          <p>We use the following SELECT statement:</p>



          <table class="code notranslate" cellspacing="0" cellpadding="0" border="0" width="100%">

            <tr>
              <td>
                SELECT * FROM Persons<br />

                ORDER BY LastName DESC
              </td>
            </tr>
          </table>



          <p>The result-set will look like this:</p>

          <table class="reference" cellspacing="0" cellpadding="0" border="1" width="100%">

            <tr>

              <th align="left">P_Id</th>

              <th align="left">LastName</th>

              <th align="left">FirstName</th>

              <th align="left">Address</th>

              <th align="left">City</th>

            </tr>

            <tr>

              <td>2</td>

              <td>Svendson</td>

              <td>Tove</td>

              <td>Borgvn 23</td>

              <td>Sandnes</td>

            </tr>

            <tr>

              <td>3</td>

              <td>Pettersen</td>

              <td>Kari</td>

              <td>Storgt 20</td>

              <td>Stavanger</td>

            </tr>

            <tr>

              <td>4</td>

              <td>Nilsen</td>

              <td>Tom</td>

              <td>Vingvn 23</td>

              <td>Stavanger</td>

            </tr>

            <tr>

              <td>1</td>

              <td>Hansen</td>

              <td>Ola</td>

              <td>Timoteivn 10</td>

              <td>Sandnes</td>

            </tr>

          </table>


        </font>

      </body>
    </html>
  </ORDER_BY>

  <TOP>
    <html>
      <body>
        <h1>
          The TOP Clause
        </h1>

        <font size="5">
         

          <p>The TOP clause is used to specify the number of records to return.</p>

          <p>The TOP clause can be very useful on large tables with thousands of records. Returning a large number of records can impact on performance.</p>

          <p>
            <b>Note:</b> Not all database systems support the TOP clause.
          </p>



          <h1>SQL Server Syntax</h1>

          <table class="code notranslate" cellspacing="0" cellpadding="0" border="0" width="100%">

            <tr>
              <td>
                SELECT TOP number|percent column_name(s)<br />

                FROM table_name
              </td>
            </tr>
          </table>

          <br />

          <hr />



          <h2>SQL SELECT TOP Equivalent in MySQL and Oracle</h2>



          <h1>MySQL Syntax</h1>

          <table class="code notranslate" cellspacing="0" cellpadding="0" border="0" width="100%">

            <tr>
              <td>
                SELECT column_name(s)<br />

                FROM table_name<br />

                LIMIT number
              </td>
            </tr>
          </table>



          <h1>Example</h1>

          <table class="code notranslate" cellspacing="0" cellpadding="0" border="0" width="100%">

            <tr>
              <td>
                SELECT *<br />

                FROM Persons<br />

                LIMIT 5
              </td>
            </tr>
          </table>



          <h1>Oracle Syntax</h1>

          <table class="code notranslate" cellspacing="0" cellpadding="0" border="0" width="100%">

            <tr>
              <td>
                SELECT column_name(s)<br />

                FROM table_name<br />

                WHERE ROWNUM &lt;= number
              </td>
            </tr>
          </table>



          <h1>Example</h1>

          <table class="code notranslate" cellspacing="0" cellpadding="0" border="0" width="100%">

            <tr>
              <td>
                SELECT *<br />

                FROM Persons<br />

                WHERE ROWNUM &lt;=5
              </td>
            </tr>
          </table>

          <br />

          <hr />



          <h1>SQL TOP Example</h1>

          <p>The &quot;Persons&quot; table:</p>

          <table class="reference" cellspacing="0" cellpadding="0" border="1" width="100%">

            <tr>

              <th align="left">P_Id</th>

              <th align="left">LastName</th>

              <th align="left">FirstName</th>

              <th align="left">Address</th>

              <th align="left">City</th>

            </tr>

            <tr>

              <td>1</td>

              <td>Hansen</td>

              <td>Ola</td>

              <td>Timoteivn 10</td>

              <td>Sandnes</td>

            </tr>

            <tr>

              <td>2</td>

              <td>Svendson</td>

              <td>Tove</td>

              <td>Borgvn 23</td>

              <td>Sandnes</td>

            </tr>

            <tr>

              <td>3</td>

              <td>Pettersen</td>

              <td>Kari</td>

              <td>Storgt 20</td>

              <td>Stavanger</td>

            </tr>

            <tr>

              <td>4</td>

              <td>Nilsen</td>

              <td>Tom</td>

              <td>Vingvn 23</td>

              <td>Stavanger</td>

            </tr>

          </table>



          <p>Now we want to select only the two first records in the table above.</p>

          <p>We use the following SELECT statement:</p>



          <table class="code notranslate" cellspacing="0" cellpadding="0" border="0" width="100%">

            <tr>
              <td>SELECT TOP 2 * FROM Persons</td>
            </tr>
          </table>



          <p>The result-set will look like this:</p>

          <table class="reference" cellspacing="0" cellpadding="0" border="1" width="100%">

            <tr>

              <th align="left">P_Id</th>

              <th align="left">LastName</th>

              <th align="left">FirstName</th>

              <th align="left">Address</th>

              <th align="left">City</th>

            </tr>

            <tr>

              <td>1</td>

              <td>Hansen</td>

              <td>Ola</td>

              <td>Timoteivn 10</td>

              <td>Sandnes</td>

            </tr>

            <tr>

              <td>2</td>

              <td>Svendson</td>

              <td>Tove</td>

              <td>Borgvn 23</td>

              <td>Sandnes</td>

            </tr>

          </table>

          <br />

          <hr />



          <h2>SQL TOP PERCENT Example</h2>

          <p>The &quot;Persons&quot; table:</p>

          <table class="reference" cellspacing="0" cellpadding="0" border="1" width="100%">

            <tr>

              <th align="left">P_Id</th>

              <th align="left">LastName</th>

              <th align="left">FirstName</th>

              <th align="left">Address</th>

              <th align="left">City</th>

            </tr>

            <tr>

              <td>1</td>

              <td>Hansen</td>

              <td>Ola</td>

              <td>Timoteivn 10</td>

              <td>Sandnes</td>

            </tr>

            <tr>

              <td>2</td>

              <td>Svendson</td>

              <td>Tove</td>

              <td>Borgvn 23</td>

              <td>Sandnes</td>

            </tr>

            <tr>

              <td>3</td>

              <td>Pettersen</td>

              <td>Kari</td>

              <td>Storgt 20</td>

              <td>Stavanger</td>

            </tr>

            <tr>

              <td>4</td>

              <td>Nilsen</td>

              <td>Tom</td>

              <td>Vingvn 23</td>

              <td>Stavanger</td>

            </tr>

          </table>

          <p>Now we want to select only 50% of the records in the table above.</p>

          <p>We use the following SELECT statement:</p>



          <table class="code notranslate" cellspacing="0" cellpadding="0" border="0" width="100%">

            <tr>
              <td>SELECT TOP 50 PERCENT * FROM Persons</td>
            </tr>
          </table>



          <p>The result-set will look like this:</p>

          <table class="reference" cellspacing="0" cellpadding="0" border="1" width="100%">

            <tr>

              <th align="left">P_Id</th>

              <th align="left">LastName</th>

              <th align="left">FirstName</th>

              <th align="left">Address</th>

              <th align="left">City</th>

            </tr>

            <tr>

              <td>1</td>

              <td>Hansen</td>

              <td>Ola</td>

              <td>Timoteivn 10</td>

              <td>Sandnes</td>

            </tr>

            <tr>

              <td>2</td>

              <td>Svendson</td>

              <td>Tove</td>

              <td>Borgvn 23</td>

              <td>Sandnes</td>

            </tr>

          </table>


        </font>

      </body>
    </html>
  </TOP>

  <LIKE>
    <html>
      <body>
        <h1>
          The LIKE Operator
        </h1>

        <font size="5">
          
          <p>The LIKE operator is used to search for a specified pattern in a column.</p>



          <h1>SQL LIKE Syntax</h1>

          <table class="code notranslate" cellspacing="0" cellpadding="0" border="0" width="100%">

            <tr>
              <td>
                SELECT column_name(s)<br />

                FROM table_name<br />

                WHERE column_name LIKE pattern
              </td>
            </tr>
          </table>

          <br />

          <hr />



          <h1>LIKE Operator Example</h1>

          <p>The &quot;Persons&quot; table:</p>

          <table class="reference" cellspacing="0" cellpadding="0" border="1" width="100%">

            <tr>

              <th align="left">P_Id</th>

              <th align="left">LastName</th>

              <th align="left">FirstName</th>

              <th align="left">Address</th>

              <th align="left">City</th>

            </tr>

            <tr>

              <td>1</td>

              <td>Hansen</td>

              <td>Ola</td>

              <td>Timoteivn 10</td>

              <td>Sandnes</td>

            </tr>

            <tr>

              <td>2</td>

              <td>Svendson</td>

              <td>Tove</td>

              <td>Borgvn 23</td>

              <td>Sandnes</td>

            </tr>

            <tr>

              <td>3</td>

              <td>Pettersen</td>

              <td>Kari</td>

              <td>Storgt 20</td>

              <td>Stavanger</td>

            </tr>

          </table>

          <p>Now we want to select the persons living in a city that starts with &quot;s&quot; from the table above.</p>

          <p>We use the following SELECT statement:</p>



          <table class="code notranslate" cellspacing="0" cellpadding="0" border="0" width="100%">

            <tr>
              <td>
                SELECT * FROM Persons<br />

                WHERE City LIKE 's%'
              </td>
            </tr>
          </table>



          <p>The &quot;%&quot; sign can be used to define wildcards (missing letters in the pattern)both before and after the pattern.</p>

          <p>The result-set will look like this:</p>

          <table class="reference" cellspacing="0" cellpadding="0" border="1" width="100%">

            <tr>

              <th align="left">P_Id</th>

              <th align="left">LastName</th>

              <th align="left">FirstName</th>

              <th align="left">Address</th>

              <th align="left">City</th>

            </tr>

            <tr>

              <td>1</td>

              <td>Hansen</td>

              <td>Ola</td>

              <td>Timoteivn 10</td>

              <td>Sandnes</td>

            </tr>

            <tr>

              <td>2</td>

              <td>Svendson</td>

              <td>Tove</td>

              <td>Borgvn 23</td>

              <td>Sandnes</td>

            </tr>

            <tr>

              <td>3</td>

              <td>Pettersen</td>

              <td>Kari</td>

              <td>Storgt 20</td>

              <td>Stavanger</td>

            </tr>

          </table>

          <p>Next, we want to select the persons living in a city that ends with an &quot;s&quot; from the &quot;Persons&quot; table.</p>

          <p>We use the following SELECT statement:</p>



          <table class="code notranslate" cellspacing="0" cellpadding="0" border="0" width="100%">

            <tr>
              <td>
                SELECT * FROM Persons<br />

                WHERE City LIKE '%s'
              </td>
            </tr>
          </table>



          <p>The result-set will look like this:</p>

          <table class="reference" cellspacing="0" cellpadding="0" border="1" width="100%">

            <tr>

              <th align="left">P_Id</th>

              <th align="left">LastName</th>

              <th align="left">FirstName</th>

              <th align="left">Address</th>

              <th align="left">City</th>

            </tr>

            <tr>

              <td>1</td>

              <td>Hansen</td>

              <td>Ola</td>

              <td>Timoteivn 10</td>

              <td>Sandnes</td>

            </tr>

            <tr>

              <td>2</td>

              <td>Svendson</td>

              <td>Tove</td>

              <td>Borgvn 23</td>

              <td>Sandnes</td>

            </tr>

          </table>

          <p>Next, we want to select the persons living in a city that contains the pattern &quot;tav&quot; from the &quot;Persons&quot; table.</p>

          <p>We use the following SELECT statement:</p>



          <table class="code notranslate" cellspacing="0" cellpadding="0" border="0" width="100%">

            <tr>
              <td>
                SELECT * FROM Persons<br />

                WHERE City LIKE '%tav%'
              </td>
            </tr>
          </table>



          <p>The result-set will look like this:</p>

          <table class="reference" cellspacing="0" cellpadding="0" border="1" width="100%">

            <tr>

              <th align="left">P_Id</th>

              <th align="left">LastName</th>

              <th align="left">FirstName</th>

              <th align="left">Address</th>

              <th align="left">City</th>

            </tr>

            <tr>

              <td>3</td>

              <td>Pettersen</td>

              <td>Kari</td>

              <td>Storgt 20</td>

              <td>Stavanger</td>

            </tr>

          </table>



          <p>
            It is also possible to select the persons living in a city that NOT contains the pattern &quot;tav&quot;

            from the &quot;Persons&quot; table, by using the NOT keyword.
          </p>

          <p>We use the following SELECT statement:</p>



          <table class="code notranslate" cellspacing="0" cellpadding="0" border="0" width="100%">

            <tr>
              <td>
                SELECT * FROM Persons<br />

                WHERE City NOT LIKE '%tav%'
              </td>
            </tr>
          </table>



          <p>The result-set will look like this:</p>

          <table class="reference" cellspacing="0" cellpadding="0" border="1" width="100%">

            <tr>

              <th align="left">P_Id</th>

              <th align="left">LastName</th>

              <th align="left">FirstName</th>

              <th align="left">Address</th>

              <th align="left">City</th>

            </tr>

            <tr>

              <td>1</td>

              <td>Hansen</td>

              <td>Ola</td>

              <td>Timoteivn 10</td>

              <td>Sandnes</td>

            </tr>

            <tr>

              <td>2</td>

              <td>Svendson</td>

              <td>Tove</td>

              <td>Borgvn 23</td>

              <td>Sandnes</td>

            </tr>

          </table>


        </font>

      </body>
    </html>
  </LIKE>

  <WILD_CARD>
    <html>
      <body>
        <h1>
          SQL Wildcards
        </h1>

        <font size="5">
         

          <p>SQL wildcards can substitute for one or more characters when searching for data in a database.</p>

          <p>SQL wildcards must be used with the SQL LIKE operator.</p>

          <p>With SQL, the following wildcards can be used:</p>

          <table class="reference" cellspacing="0" cellpadding="0" border="1" width="100%">

            <tr>

              <th width="15%" align="left">Wildcard</th>

              <th width="85%" align="left" valign="top">Description</th>

            </tr>

            <tr>

              <td valign="top">%</td>

              <td valign="top">A substitute for zero or more characters </td>

            </tr>

            <tr>

              <td valign="top">_</td>

              <td valign="top">A substitute for exactly one character</td>

            </tr>

            <tr>

              <td valign="top">[charlist]</td>

              <td valign="top">Any single character in charlist</td>

            </tr>

            <tr>

              <td valign="top">
                [^charlist]<p>or</p>

                <p>[!charlist]</p>
              </td>

              <td valign="top">Any single character not in charlist</td>

            </tr>

          </table>

          <br />

          <hr />



          <h1>SQL Wildcard Examples</h1>

          <p>We have the following &quot;Persons&quot; table:</p>

          <table class="reference" cellspacing="0" cellpadding="0" border="1" width="100%">

            <tr>

              <th align="left">P_Id</th>

              <th align="left">LastName</th>

              <th align="left">FirstName</th>

              <th align="left">Address</th>

              <th align="left">City</th>

            </tr>

            <tr>

              <td>1</td>

              <td>Hansen</td>

              <td>Ola</td>

              <td>Timoteivn 10</td>

              <td>Sandnes</td>

            </tr>

            <tr>

              <td>2</td>

              <td>Svendson</td>

              <td>Tove</td>

              <td>Borgvn 23</td>

              <td>Sandnes</td>

            </tr>

            <tr>

              <td>3</td>

              <td>Pettersen</td>

              <td>Kari</td>

              <td>Storgt 20</td>

              <td>Stavanger</td>

            </tr>

          </table>

          <br />

          <hr />



          <h1>Using the % Wildcard</h1>

          <p>Now we want to select the persons living in a city that starts with &quot;sa&quot; from the &quot;Persons&quot; table.</p>

          <p>We use the following SELECT statement:</p>



          <table class="code notranslate" cellspacing="0" cellpadding="0" border="0" width="100%">

            <tr>
              <td>
                SELECT * FROM Persons<br />

                WHERE City LIKE 'sa%'
              </td>
            </tr>
          </table>



          <p>The result-set will look like this:</p>

          <table class="reference" cellspacing="0" cellpadding="0" border="1" width="100%">

            <tr>

              <th align="left">P_Id</th>

              <th align="left">LastName</th>

              <th align="left">FirstName</th>

              <th align="left">Address</th>

              <th align="left">City</th>

            </tr>

            <tr>

              <td>1</td>

              <td>Hansen</td>

              <td>Ola</td>

              <td>Timoteivn 10</td>

              <td>Sandnes</td>

            </tr>

            <tr>

              <td>2</td>

              <td>Svendson</td>

              <td>Tove</td>

              <td>Borgvn 23</td>

              <td>Sandnes</td>

            </tr>

          </table>

          <p>Next, we want to select the persons living in a city that contains the pattern &quot;nes&quot; from the &quot;Persons&quot; table.</p>

          <p>We use the following SELECT statement:</p>



          <table class="code notranslate" cellspacing="0" cellpadding="0" border="0" width="100%">

            <tr>
              <td>
                SELECT * FROM Persons<br />

                WHERE City LIKE '%nes%'
              </td>
            </tr>
          </table>



          <p>The result-set will look like this:</p>

          <table class="reference" cellspacing="0" cellpadding="0" border="1" width="100%">

            <tr>

              <th align="left">P_Id</th>

              <th align="left">LastName</th>

              <th align="left">FirstName</th>

              <th align="left">Address</th>

              <th align="left">City</th>

            </tr>

            <tr>

              <td>1</td>

              <td>Hansen</td>

              <td>Ola</td>

              <td>Timoteivn 10</td>

              <td>Sandnes</td>

            </tr>

            <tr>

              <td>2</td>

              <td>Svendson</td>

              <td>Tove</td>

              <td>Borgvn 23</td>

              <td>Sandnes</td>

            </tr>

          </table>

          <br />

          <hr />



          <h2>Using the _ Wildcard</h2>

          <p>
            Now we want to select the persons with a first name that starts with any character, followed by &quot;la&quot;

            from the &quot;Persons&quot; table.
          </p>

          <p>We use the following SELECT statement:</p>



          <table class="code notranslate" cellspacing="0" cellpadding="0" border="0" width="100%">

            <tr>
              <td>
                SELECT * FROM Persons<br />

                WHERE FirstName LIKE '_la'
              </td>
            </tr>
          </table>



          <p>The result-set will look like this:</p>

          <table class="reference" cellspacing="0" cellpadding="0" border="1" width="100%">

            <tr>

              <th align="left">P_Id</th>

              <th align="left">LastName</th>

              <th align="left">FirstName</th>

              <th align="left">Address</th>

              <th align="left">City</th>

            </tr>

            <tr>

              <td>1</td>

              <td>Hansen</td>

              <td>Ola</td>

              <td>Timoteivn 10</td>

              <td>Sandnes</td>

            </tr>

          </table>

          <p>
            Next, we want to select the persons with a last name that starts with &quot;S&quot;,

            followed by any character, followed by &quot;end&quot;, followed by any character,

            followed by &quot;on&quot; from the &quot;Persons&quot; table.
          </p>

          <p>We use the following SELECT statement:</p>



          <table class="code notranslate" cellspacing="0" cellpadding="0" border="0" width="100%">

            <tr>
              <td>
                SELECT * FROM Persons<br />

                WHERE LastName LIKE 'S_end_on'
              </td>
            </tr>
          </table>



          <p>The result-set will look like this:</p>

          <table class="reference" cellspacing="0" cellpadding="0" border="1" width="100%">

            <tr>

              <th align="left">P_Id</th>

              <th align="left">LastName</th>

              <th align="left">FirstName</th>

              <th align="left">Address</th>

              <th align="left">City</th>

            </tr>

            <tr>

              <td>2</td>

              <td>Svendson</td>

              <td>Tove</td>

              <td>Borgvn 23</td>

              <td>Sandnes</td>

            </tr>

          </table>

          <br />

          <hr />



          <h1>Using the [charlist] Wildcard</h1>

          <p>
            Now we want to select the persons with a last name that starts with &quot;b&quot; or &quot;s&quot; or &quot;p&quot;

            from the &quot;Persons&quot; table.
          </p>

          <p>We use the following SELECT statement:</p>



          <table class="code notranslate" cellspacing="0" cellpadding="0" border="0" width="100%">

            <tr>
              <td>
                SELECT * FROM Persons<br />

                WHERE LastName LIKE '[bsp]%'
              </td>
            </tr>
          </table>



          <p>The result-set will look like this:</p>

          <table class="reference" cellspacing="0" cellpadding="0" border="1" width="100%">

            <tr>

              <th align="left">P_Id</th>

              <th align="left">LastName</th>

              <th align="left">FirstName</th>

              <th align="left">Address</th>

              <th align="left">City</th>

            </tr>

            <tr>

              <td>2</td>

              <td>Svendson</td>

              <td>Tove</td>

              <td>Borgvn 23</td>

              <td>Sandnes</td>

            </tr>

            <tr>

              <td>3</td>

              <td>Pettersen</td>

              <td>Kari</td>

              <td>Storgt 20</td>

              <td>Stavanger</td>

            </tr>

          </table>

          <p>
            Next, we want to select the persons with a last name that do not start with

            &quot;b&quot; or &quot;s&quot; or &quot;p&quot; from the &quot;Persons&quot; table.
          </p>

          <p>We use the following SELECT statement:</p>



          <table class="code notranslate" cellspacing="0" cellpadding="0" border="0" width="100%">

            <tr>
              <td>
                SELECT * FROM Persons<br />

                WHERE LastName LIKE '[!bsp]%'
              </td>
            </tr>
          </table>



          <p>The result-set will look like this:</p>

          <table class="reference" cellspacing="0" cellpadding="0" border="1" width="100%">

            <tr>

              <th align="left">P_Id</th>

              <th align="left">LastName</th>

              <th align="left">FirstName</th>

              <th align="left">Address</th>

              <th align="left">City</th>

            </tr>

            <tr>

              <td>1</td>

              <td>Hansen</td>

              <td>Ola</td>

              <td>Timoteivn 10</td>

              <td>Sandnes</td>

            </tr>

          </table>


        </font>

      </body>
    </html>
  </WILD_CARD>

  <IN>
    <html>
      <body>
        <h1>
          The IN Operator
        </h1>

        <font size="5">
         

          <p>The IN operator allows you to specify multiple values in a WHERE clause.</p>



          <h1>SQL IN Syntax</h1>

          <table class="code notranslate" cellspacing="0" cellpadding="0" border="0" width="100%">

            <tr>
              <td>
                SELECT column_name(s)<br />

                FROM table_name<br />

                WHERE column_name IN (value1,value2,...)
              </td>
            </tr>
          </table>

          <br />

          <hr />



          <h1>IN Operator Example</h1>

          <p>The &quot;Persons&quot; table:</p>

          <table class="reference" cellspacing="0" cellpadding="0" border="1" width="100%">

            <tr>

              <th align="left">P_Id</th>

              <th align="left">LastName</th>

              <th align="left">FirstName</th>

              <th align="left">Address</th>

              <th align="left">City</th>

            </tr>

            <tr>

              <td>1</td>

              <td>Hansen</td>

              <td>Ola</td>

              <td>Timoteivn 10</td>

              <td>Sandnes</td>

            </tr>

            <tr>

              <td>2</td>

              <td>Svendson</td>

              <td>Tove</td>

              <td>Borgvn 23</td>

              <td>Sandnes</td>

            </tr>

            <tr>

              <td>3</td>

              <td>Pettersen</td>

              <td>Kari</td>

              <td>Storgt 20</td>

              <td>Stavanger</td>

            </tr>

          </table>

          <p>Now we want to select the persons with a last name equal to &quot;Hansen&quot; or &quot;Pettersen&quot; from the table above.</p>

          <p>We use the following SELECT statement:</p>



          <table class="code notranslate" cellspacing="0" cellpadding="0" border="0" width="100%">

            <tr>
              <td>
                SELECT * FROM Persons<br />

                WHERE LastName IN ('Hansen','Pettersen')
              </td>
            </tr>
          </table>



          <p>The result-set will look like this:</p>

          <table class="reference" cellspacing="0" cellpadding="0" border="1" width="100%">

            <tr>

              <th align="left">P_Id</th>

              <th align="left">LastName</th>

              <th align="left">FirstName</th>

              <th align="left">Address</th>

              <th align="left">City</th>

            </tr>

            <tr>

              <td>1</td>

              <td>Hansen</td>

              <td>Ola</td>

              <td>Timoteivn 10</td>

              <td>Sandnes</td>

            </tr>

            <tr>

              <td>3</td>

              <td>Pettersen</td>

              <td>Kari</td>

              <td>Storgt 20</td>

              <td>Stavanger</td>

            </tr>

          </table>


        </font>

      </body>
    </html>
  </IN>

  <BETWEEN>
    <html>
      <body>
        <h1>
          The BETWEEN Operator
        </h1>

        <font size="5">
         

          <p>The BETWEEN operator selects a range of data between two values. The values can be numbers, text, or dates.</p>

          <h1>SQL BETWEEN Syntax</h1>



          <table class="code notranslate" cellspacing="0" cellpadding="0" border="0" width="100%">

            <tr>
              <td>
                SELECT column_name(s)<br />

                FROM table_name<br />

                WHERE column_name<br />

                BETWEEN value1 AND value2
              </td>
            </tr>
          </table>

          <br />

          <hr />



          <h1>BETWEEN Operator Example</h1>

          <p>The &quot;Persons&quot; table:</p>

          <table class="reference" cellspacing="0" cellpadding="0" border="1" width="100%">

            <tr>

              <th align="left">P_Id</th>

              <th align="left">LastName</th>

              <th align="left">FirstName</th>

              <th align="left">Address</th>

              <th align="left">City</th>

            </tr>

            <tr>

              <td>1</td>

              <td>Hansen</td>

              <td>Ola</td>

              <td>Timoteivn 10</td>

              <td>Sandnes</td>

            </tr>

            <tr>

              <td>2</td>

              <td>Svendson</td>

              <td>Tove</td>

              <td>Borgvn 23</td>

              <td>Sandnes</td>

            </tr>

            <tr>

              <td>3</td>

              <td>Pettersen</td>

              <td>Kari</td>

              <td>Storgt 20</td>

              <td>Stavanger</td>

            </tr>

          </table>



          <p>Now we want to select the persons with a last name alphabetically between &quot;Hansen&quot; and &quot;Pettersen&quot; from the table above.</p>

          <p>We use the following SELECT statement:</p>



          <table class="code notranslate" cellspacing="0" cellpadding="0" border="0" width="100%">

            <tr>
              <td>
                SELECT * FROM Persons<br />

                WHERE LastName<br />

                BETWEEN 'Hansen' AND 'Pettersen'
              </td>
            </tr>
          </table>



          <p>The result-set will look like this:</p>

          <table class="reference" cellspacing="0" cellpadding="0" border="1" width="100%">

            <tr>

              <th align="left">P_Id</th>

              <th align="left">LastName</th>

              <th align="left">FirstName</th>

              <th align="left">Address</th>

              <th align="left">City</th>

            </tr>

            <tr>

              <td>1</td>

              <td>Hansen</td>

              <td>Ola</td>

              <td>Timoteivn 10</td>

              <td>Sandnes</td>

            </tr>

          </table>

          <p>
            <b>Note:</b> The BETWEEN operator is treated differently in different

            databases!
          </p>

          <p>
            In some databases, persons with the LastName of &quot;Hansen&quot; or &quot;Pettersen&quot; will not be listed, because the BETWEEN

            operator only selects fields that are between and excluding the test values.
          </p>

          <p>
            In other databases, persons with the LastName of &quot;Hansen&quot; or &quot;Pettersen&quot; will be listed, because the BETWEEN

            operator selects fields that are between and including the test values.
          </p>

          <p>
            And in other databases, persons with the LastName of &quot;Hansen&quot; will be listed, but &quot;Pettersen&quot; will not be listed

            (like the example above), because the BETWEEN operator selects fields between the test values, including the first test value and excluding the

            last test value.
          </p>

          <p>Therefore: Check how your database treats the BETWEEN operator.</p>

          <hr />



          <h1>Example 2</h1>

          <p>To display the persons outside the range in the previous example, use NOT BETWEEN:</p>



          <table class="code notranslate" cellspacing="0" cellpadding="0" border="0" width="100%">

            <tr>
              <td>
                SELECT * FROM Persons<br />

                WHERE LastName<br />

                NOT BETWEEN 'Hansen' AND 'Pettersen'
              </td>
            </tr>
          </table>



          <p>The result-set will look like this:</p>

          <table class="reference" cellspacing="0" cellpadding="0" border="1" width="100%">

            <tr>

              <th align="left">P_Id</th>

              <th align="left">LastName</th>

              <th align="left">FirstName</th>

              <th align="left">Address</th>

              <th align="left">City</th>

            </tr>

            <tr>

              <td>2</td>

              <td>Svendson</td>

              <td>Tove</td>

              <td>Borgvn 23</td>

              <td>Sandnes</td>

            </tr>

            <tr>

              <td>3</td>

              <td>Pettersen</td>

              <td>Kari</td>

              <td>Storgt 20</td>

              <td>Stavanger</td>

            </tr>

          </table>


        </font>

      </body>
    </html>
  </BETWEEN>

  <ALIAS>
    <html>
      <body>
        <h1>
          SQL Alias
        </h1>

        <font size="5">
          

          <p>
            You can give a table or a column another name by using an alias. This can be

            a good thing to do if you have very long or complex table names or column names.
          </p>

          <p>An alias name could be anything, but usually it is short.</p>

          <h1>SQL Alias Syntax for Tables</h1>

          <table class="code notranslate" cellspacing="0" cellpadding="0" border="0" width="100%">

            <tr>

              <td>
                SELECT column_name(s)<br />

                FROM table_name<br />

                AS alias_name
              </td>

            </tr>

          </table>



          <h1>SQL Alias Syntax for Columns</h1>

          <table class="code notranslate" cellspacing="0" cellpadding="0" border="0" width="100%">

            <tr>

              <td>
                SELECT column_name AS alias_name<br />

                FROM table_name
              </td>

            </tr>

          </table>

          <br />

          <hr />

          <h1>Alias Example</h1>

          <p>
            Assume we have a table called &quot;Persons&quot; and another table called &quot;Product_Orders&quot;.

            We will give the table aliases of &quot;p&quot; and &quot;po&quot; respectively.
          </p>

          <p>Now we want to list all the orders that &quot;Ola Hansen&quot; is responsible for.</p>

          <p>We use the following SELECT statement:</p>

          <table class="code notranslate" cellspacing="0" cellpadding="0" border="0" width="100%">

            <tr>

              <td>
                SELECT po.OrderID, p.LastName, p.FirstName<br />

                FROM Persons AS p,<br />

                Product_Orders AS po<br />

                WHERE p.LastName='Hansen' AND p.FirstName='Ola'
              </td>

            </tr>

          </table>



          <p>The same SELECT statement without aliases:</p>

          <table class="code notranslate" cellspacing="0" cellpadding="0" border="0" width="100%">

            <tr>

              <td>
                SELECT Product_Orders.OrderID, Persons.LastName, Persons.FirstName<br />

                FROM Persons,<br />

                Product_Orders<br />

                WHERE Persons.LastName='Hansen' AND Persons.FirstName='Ola'
              </td>

            </tr>

          </table>


        </font>

      </body>
    </html>
  </ALIAS>

  <OVERVIEWS>
    <html>
      <body>
        <h1>
          SQL JOIN
        </h1>

        <font size="5">
         

          <p>The JOIN keyword is used in an SQL statement to query data from two or more tables, based on a relationship between certain columns in these tables.</p>

          <p>Tables in a database are often related to each other with keys.</p>

          <p>
            A primary key is a column (or a combination of columns) with a unique value for each row. Each primary key value must be unique within

            the table. The purpose is to bind data together, across tables, without repeating all of the data in every table.
          </p>



          <p>Look at the &quot;Persons&quot; table:</p>

          <table class="reference" cellspacing="0" cellpadding="0" border="1" width="100%">

            <tr>

              <th align="left">P_Id</th>

              <th align="left">LastName</th>

              <th align="left">FirstName</th>

              <th align="left">Address</th>

              <th align="left">City</th>

            </tr>

            <tr>

              <td>1</td>

              <td>Hansen</td>

              <td>Ola</td>

              <td>Timoteivn 10</td>

              <td>Sandnes</td>

            </tr>

            <tr>

              <td>2</td>

              <td>Svendson</td>

              <td>Tove</td>

              <td>Borgvn 23</td>

              <td>Sandnes</td>

            </tr>

            <tr>

              <td>3</td>

              <td>Pettersen</td>

              <td>Kari</td>

              <td>Storgt 20</td>

              <td>Stavanger</td>

            </tr>

          </table>

          <p>
            Note that the &quot;P_Id&quot; column is the primary key in the &quot;Persons&quot; table. This means that <b>no</b> two rows can have the same P_Id. The

            P_Id distinguishes two persons even if they have the same name.
          </p>



          <p>Next, we have the &quot;Orders&quot; table:</p>

          <table class="reference" cellspacing="0" cellpadding="0" border="1" width="50%">

            <tr>

              <th width="15%" align="left">O_Id</th>

              <th width="20%" align="left">OrderNo</th>

              <th width="15%" align="left">P_Id</th>

            </tr>

            <tr>

              <td>1</td>

              <td>77895</td>

              <td>3</td>

            </tr>

            <tr>

              <td>2</td>

              <td>44678</td>

              <td>3</td>

            </tr>

            <tr>

              <td>3</td>

              <td>22456</td>

              <td>1</td>

            </tr>

            <tr>

              <td>4</td>

              <td>24562</td>

              <td>1</td>

            </tr>

            <tr>

              <td>5</td>

              <td>34764</td>

              <td>15</td>

            </tr>

          </table>

          <p>
            Note that the &quot;O_Id&quot; column is the primary key in the &quot;Orders&quot; table and that the &quot;P_Id&quot; column refers to the

            persons in the &quot;Persons&quot; table without using their names.
          </p>

          <p>Notice that the relationship between the two tables above is the &quot;P_Id&quot; column.</p>

          <hr />



          <h1>Different SQL JOINs</h1>

          <p>Before we continue with examples, we will list the types of JOIN you can use, and the differences between them.</p>

          <ul>

            <li>
              <b>JOIN</b>: Return rows when there is at least one match in both tables
            </li>

            <li>
              <b>LEFT JOIN</b>: Return all rows from the left table, even if there are no matches in the right table
            </li>

            <li>
              <b>RIGHT JOIN</b>: Return all rows from the right table, even if there are no matches in the left table
            </li>

            <li>
              <b>FULL JOIN</b>: Return rows when there is a match in one of the tables
            </li>

          </ul>

          <br />


        </font>

      </body>
    </html>
  </OVERVIEWS>

  <INNER_JOIN>
    <html>
      <body>
        <h1>
          SQL INNER JOIN Keyword
        </h1>

        <font size="5">
        

          <p>The INNER JOIN keyword return rows when there is at least one match in both tables.</p>



          <h1>SQL INNER JOIN Syntax</h1>

          <table class="code notranslate" cellspacing="0" cellpadding="0" border="0" width="100%">

            <tr>
              <td>
                SELECT column_name(s)<br />

                FROM table_name1<br />

                INNER JOIN table_name2<br />

                ON table_name1.column_name=table_name2.column_name
              </td>
            </tr>
          </table>

          <p>
            <b>PS:</b> INNER JOIN is the same as JOIN.
          </p>

          <hr />



          <h1>SQL INNER JOIN Example</h1>

          <p>The &quot;Persons&quot; table:</p>

          <table class="reference" cellspacing="0" cellpadding="0" border="1" width="100%">

            <tr>

              <th align="left">P_Id</th>

              <th align="left">LastName</th>

              <th align="left">FirstName</th>

              <th align="left">Address</th>

              <th align="left">City</th>

            </tr>

            <tr>

              <td>1</td>

              <td>Hansen</td>

              <td>Ola</td>

              <td>Timoteivn 10</td>

              <td>Sandnes</td>

            </tr>

            <tr>

              <td>2</td>

              <td>Svendson</td>

              <td>Tove</td>

              <td>Borgvn 23</td>

              <td>Sandnes</td>

            </tr>

            <tr>

              <td>3</td>

              <td>Pettersen</td>

              <td>Kari</td>

              <td>Storgt 20</td>

              <td>Stavanger</td>

            </tr>

          </table>

          <p>The &quot;Orders&quot; table:</p>

          <table class="reference" cellspacing="0" cellpadding="0" border="1" width="50%">

            <tr>

              <th width="15%" align="left">O_Id</th>

              <th width="20%" align="left">OrderNo</th>

              <th width="15%" align="left">P_Id</th>

            </tr>

            <tr>

              <td>1</td>

              <td>77895</td>

              <td>3</td>

            </tr>

            <tr>

              <td>2</td>

              <td>44678</td>

              <td>3</td>

            </tr>

            <tr>

              <td>3</td>

              <td>22456</td>

              <td>1</td>

            </tr>

            <tr>

              <td>4</td>

              <td>24562</td>

              <td>1</td>

            </tr>

            <tr>

              <td>5</td>

              <td>34764</td>

              <td>15</td>

            </tr>

          </table>

          <p>Now we want to list all the persons with any orders.</p>

          <p>We use the following SELECT statement:</p>



          <table class="code notranslate" cellspacing="0" cellpadding="0" border="0" width="100%">

            <tr>
              <td>
                SELECT Persons.LastName, Persons.FirstName, Orders.OrderNo<br />

                FROM Persons<br />

                INNER JOIN Orders<br />

                ON Persons.P_Id=Orders.P_Id<br />

                ORDER BY Persons.LastName
              </td>
            </tr>
          </table>



          <p>The result-set will look like this:</p>

          <table class="reference" cellspacing="0" cellpadding="0" border="1" width="100%">

            <tr>

              <th align="left">LastName</th>

              <th align="left">FirstName</th>

              <th align="left">OrderNo</th>

            </tr>

            <tr>

              <td>Hansen</td>

              <td>Ola</td>

              <td>22456</td>

            </tr>

            <tr>

              <td>Hansen</td>

              <td>Ola</td>

              <td>24562</td>

            </tr>

            <tr>

              <td>Pettersen</td>

              <td>Kari</td>

              <td>77895</td>

            </tr>

            <tr>

              <td>Pettersen</td>

              <td>Kari</td>

              <td>44678</td>

            </tr>

          </table>

          <p>
            The INNER JOIN keyword return rows when there is at least one match in both tables. If there are rows in

            &quot;Persons&quot; that do not have matches in &quot;Orders&quot;, those rows will NOT be listed.
          </p>

          <br />


        </font>

      </body>
    </html>
  </INNER_JOIN>

  <LEFT_JOIN>

    <html>
      <body>
        <h1>
          SQL LEFT JOIN Keyword
        </h1>

        <font size="5">
        
          <p>The LEFT JOIN keyword returns all rows from the left table (table_name1), even if there are no matches in the right table (table_name2).</p>



          <h1>SQL LEFT JOIN Syntax</h1>

          <table class="code notranslate" cellspacing="0" cellpadding="0" border="0" width="100%">

            <tr>
              <td>
                SELECT column_name(s)<br />

                FROM table_name1<br />

                LEFT JOIN table_name2<br />

                ON table_name1.column_name=table_name2.column_name
              </td>
            </tr>
          </table>

          <p>
            <b>PS:</b> In some databases LEFT JOIN is called LEFT OUTER JOIN.
          </p>

          <hr />



          <h1>SQL LEFT JOIN Example</h1>

          <p>The &quot;Persons&quot; table:</p>

          <table class="reference" cellspacing="0" cellpadding="0" border="1" width="100%">

            <tr>

              <th align="left">P_Id</th>

              <th align="left">LastName</th>

              <th align="left">FirstName</th>

              <th align="left">Address</th>

              <th align="left">City</th>

            </tr>

            <tr>

              <td>1</td>

              <td>Hansen</td>

              <td>Ola</td>

              <td>Timoteivn 10</td>

              <td>Sandnes</td>

            </tr>

            <tr>

              <td>2</td>

              <td>Svendson</td>

              <td>Tove</td>

              <td>Borgvn 23</td>

              <td>Sandnes</td>

            </tr>

            <tr>

              <td>3</td>

              <td>Pettersen</td>

              <td>Kari</td>

              <td>Storgt 20</td>

              <td>Stavanger</td>

            </tr>

          </table>

          <p>The &quot;Orders&quot; table:</p>

          <table class="reference" cellspacing="0" cellpadding="0" border="1" width="50%">

            <tr>

              <th width="15%" align="left">O_Id</th>

              <th width="20%" align="left">OrderNo</th>

              <th width="15%" align="left">P_Id</th>

            </tr>

            <tr>

              <td>1</td>

              <td>77895</td>

              <td>3</td>

            </tr>

            <tr>

              <td>2</td>

              <td>44678</td>

              <td>3</td>

            </tr>

            <tr>

              <td>3</td>

              <td>22456</td>

              <td>1</td>

            </tr>

            <tr>

              <td>4</td>

              <td>24562</td>

              <td>1</td>

            </tr>

            <tr>

              <td>5</td>

              <td>34764</td>

              <td>15</td>

            </tr>

          </table>

          <p>Now we want to list all the persons and their orders - if any, from the tables above.</p>

          <p>We use the following SELECT statement:</p>



          <table class="code notranslate" cellspacing="0" cellpadding="0" border="0" width="100%">

            <tr>
              <td>
                SELECT Persons.LastName, Persons.FirstName, Orders.OrderNo<br />

                FROM Persons<br />

                LEFT JOIN Orders<br />

                ON Persons.P_Id=Orders.P_Id<br />

                ORDER BY Persons.LastName
              </td>
            </tr>
          </table>



          <p>The result-set will look like this:</p>

          <table class="reference" cellspacing="0" cellpadding="0" border="1" width="100%">

            <tr>

              <th align="left">LastName</th>

              <th align="left">FirstName</th>

              <th align="left">OrderNo</th>

            </tr>

            <tr>

              <td>Hansen</td>

              <td>Ola</td>

              <td>22456</td>

            </tr>

            <tr>

              <td>Hansen</td>

              <td>Ola</td>

              <td>24562</td>

            </tr>

            <tr>

              <td>Pettersen</td>

              <td>Kari</td>

              <td>77895</td>

            </tr>

            <tr>

              <td>Pettersen</td>

              <td>Kari</td>

              <td>44678</td>

            </tr>

            <tr>

              <td>Svendson</td>

              <td>Tove</td>

             

            </tr>

          </table>

          <p>The LEFT JOIN keyword returns all the rows from the left table (Persons), even if there are no matches in the right table (Orders).</p>

          <br />


        </font>

      </body>
    </html>
  </LEFT_JOIN>

  <RIGHT_JOIN>

    <html>
      <body>
        <h1>
          SQL RIGHT JOIN Keyword
        </h1>

        <font size="5">
         
          <p>The RIGHT JOIN keyword returns all the rows from the right table (table_name2), even if there are no matches in the left table (table_name1).</p>



          <h1>SQL RIGHT JOIN Syntax</h1>

          <table class="code notranslate" cellspacing="0" cellpadding="0" border="0" width="100%">

            <tr>
              <td>
                SELECT column_name(s)<br />

                FROM table_name1<br />

                RIGHT JOIN table_name2<br />

                ON table_name1.column_name=table_name2.column_name
              </td>
            </tr>
          </table>

          <p>
            <b>PS:</b> In some databases RIGHT JOIN is called RIGHT OUTER JOIN.
          </p>

          <hr />



          <h1>SQL RIGHT JOIN Example</h1>

          <p>The &quot;Persons&quot; table:</p>

          <table class="reference" cellspacing="0" cellpadding="0" border="1" width="100%">

            <tr>

              <th align="left">P_Id</th>

              <th align="left">LastName</th>

              <th align="left">FirstName</th>

              <th align="left">Address</th>

              <th align="left">City</th>

            </tr>

            <tr>

              <td>1</td>

              <td>Hansen</td>

              <td>Ola</td>

              <td>Timoteivn 10</td>

              <td>Sandnes</td>

            </tr>

            <tr>

              <td>2</td>

              <td>Svendson</td>

              <td>Tove</td>

              <td>Borgvn 23</td>

              <td>Sandnes</td>

            </tr>

            <tr>

              <td>3</td>

              <td>Pettersen</td>

              <td>Kari</td>

              <td>Storgt 20</td>

              <td>Stavanger</td>

            </tr>

          </table>

          <p>The &quot;Orders&quot; table:</p>

          <table class="reference" cellspacing="0" cellpadding="0" border="1" width="50%">

            <tr>

              <th width="15%" align="left">O_Id</th>

              <th width="20%" align="left">OrderNo</th>

              <th width="15%" align="left">P_Id</th>

            </tr>

            <tr>

              <td>1</td>

              <td>77895</td>

              <td>3</td>

            </tr>

            <tr>

              <td>2</td>

              <td>44678</td>

              <td>3</td>

            </tr>

            <tr>

              <td>3</td>

              <td>22456</td>

              <td>1</td>

            </tr>

            <tr>

              <td>4</td>

              <td>24562</td>

              <td>1</td>

            </tr>

            <tr>

              <td>5</td>

              <td>34764</td>

              <td>15</td>

            </tr>

          </table>

          <p>Now we want to list all the orders with containing persons - if any, from the tables above.</p>

          <p>We use the following SELECT statement:</p>



          <table class="code notranslate" cellspacing="0" cellpadding="0" border="0" width="100%">

            <tr>
              <td>
                SELECT Persons.LastName, Persons.FirstName, Orders.OrderNo<br />

                FROM Persons<br />

                RIGHT JOIN Orders<br />

                ON Persons.P_Id=Orders.P_Id<br />

                ORDER BY Persons.LastName
              </td>
            </tr>
          </table>



          <p>The result-set will look like this:</p>

          <table class="reference" cellspacing="0" cellpadding="0" border="1" width="100%">

            <tr>

              <th align="left">LastName</th>

              <th align="left">FirstName</th>

              <th align="left">OrderNo</th>

            </tr>

            <tr>

              <td>Hansen</td>

              <td>Ola</td>

              <td>22456</td>

            </tr>

            <tr>

              <td>Hansen</td>

              <td>Ola</td>

              <td>24562</td>

            </tr>

            <tr>

              <td>Pettersen</td>

              <td>Kari</td>

              <td>77895</td>

            </tr>

            <tr>

              <td>Pettersen</td>

              <td>Kari</td>

              <td>44678</td>

            </tr>

            <tr>

              

              <td>34764</td>

            </tr>

          </table>

          <p>The RIGHT JOIN keyword returns all the rows from the right table (Orders), even if there are no matches in the left table (Persons).</p>

          <br />


        </font>

      </body>
    </html>
  </RIGHT_JOIN>

  <FULL_JOIN>
    <html>
      <body>
        <h1>
          SQL FULL JOIN Keyword
        </h1>

        <font size="5">
         

          <p>The FULL JOIN keyword return rows when there is a match in one of the tables.</p>



          <h1>SQL FULL JOIN Syntax</h1>

          <table class="code notranslate" cellspacing="0" cellpadding="0" border="0" width="100%">

            <tr>
              <td>
                SELECT column_name(s)<br />

                FROM table_name1<br />

                FULL JOIN table_name2<br />

                ON table_name1.column_name=table_name2.column_name
              </td>
            </tr>
          </table>

          <br />

          <hr />



          <h1>SQL FULL JOIN Example</h1>

          <p>The &quot;Persons&quot; table:</p>

          <table class="reference" cellspacing="0" cellpadding="0" border="1" width="100%">

            <tr>

              <th align="left">P_Id</th>

              <th align="left">LastName</th>

              <th align="left">FirstName</th>

              <th align="left">Address</th>

              <th align="left">City</th>

            </tr>

            <tr>

              <td>1</td>

              <td>Hansen</td>

              <td>Ola</td>

              <td>Timoteivn 10</td>

              <td>Sandnes</td>

            </tr>

            <tr>

              <td>2</td>

              <td>Svendson</td>

              <td>Tove</td>

              <td>Borgvn 23</td>

              <td>Sandnes</td>

            </tr>

            <tr>

              <td>3</td>

              <td>Pettersen</td>

              <td>Kari</td>

              <td>Storgt 20</td>

              <td>Stavanger</td>

            </tr>

          </table>

          <p>The &quot;Orders&quot; table:</p>

          <table class="reference" cellspacing="0" cellpadding="0" border="1" width="50%">

            <tr>

              <th width="15%" align="left">O_Id</th>

              <th width="20%" align="left">OrderNo</th>

              <th width="15%" align="left">P_Id</th>

            </tr>

            <tr>

              <td>1</td>

              <td>77895</td>

              <td>3</td>

            </tr>

            <tr>

              <td>2</td>

              <td>44678</td>

              <td>3</td>

            </tr>

            <tr>

              <td>3</td>

              <td>22456</td>

              <td>1</td>

            </tr>

            <tr>

              <td>4</td>

              <td>24562</td>

              <td>1</td>

            </tr>

            <tr>

              <td>5</td>

              <td>34764</td>

              <td>15</td>

            </tr>

          </table>

          <p>Now we want to list all the persons and their orders, and all the orders with their persons.</p>

          <p>We use the following SELECT statement:</p>



          <table class="code notranslate" cellspacing="0" cellpadding="0" border="0" width="100%">

            <tr>
              <td>
                SELECT Persons.LastName, Persons.FirstName, Orders.OrderNo<br />

                FROM Persons<br />

                FULL JOIN Orders<br />

                ON Persons.P_Id=Orders.P_Id<br />

                ORDER BY Persons.LastName
              </td>
            </tr>
          </table>



          <p>The result-set will look like this:</p>

          <table class="reference" cellspacing="0" cellpadding="0" border="1" width="100%">

            <tr>

              <th align="left">LastName</th>

              <th align="left">FirstName</th>

              <th align="left">OrderNo</th>

            </tr>

            <tr>

              <td>Hansen</td>

              <td>Ola</td>

              <td>22456</td>

            </tr>

            <tr>

              <td>Hansen</td>

              <td>Ola</td>

              <td>24562</td>

            </tr>

            <tr>

              <td>Pettersen</td>

              <td>Kari</td>

              <td>77895</td>

            </tr>

            <tr>

              <td>Pettersen</td>

              <td>Kari</td>

              <td>44678</td>

            </tr>

            <tr>

              <td>Svendson</td>

              <td>Tove</td>

            

            </tr>

            <tr>

              

              <td>34764</td>

            </tr>

          </table>



          <p>
            The FULL JOIN keyword returns all the rows from the left table (Persons), and all the rows from the right table (Orders). If there are rows in

            &quot;Persons&quot; that do not have matches in &quot;Orders&quot;, or if there are rows in &quot;Orders&quot; that do not have matches in &quot;Persons&quot;, those rows will be

            listed as well.
          </p>

          <br />


        </font>

      </body>
    </html>
  </FULL_JOIN>
  <SQL_CONSTRAINTS>
    <html>
      <body>
        <h1>
          SQL Constraints

        </h1>

        <font size="5">
          

          <p>Constraints are used to limit the type of data that can go into a table.</p>

          <p>Constraints can be specified when a table is created (with the CREATE TABLE statement) or after the table is created (with the ALTER TABLE statement).</p>

          <p>We will focus on the following constraints:</p>

          <ul>

            <li>NOT NULL</li>

            <li>UNIQUE</li>

            <li>PRIMARY KEY</li>

            <li>FOREIGN KEY</li>

            <li>CHECK</li>

            <li>DEFAULT</li>

          </ul>

          <p>The next chapters will describe each constraint in details.</p>
         
          


          <hr />


        </font>

      </body>
    </html>
  </SQL_CONSTRAINTS>

  <NOT_NULL>
    <html>
      <body>
        <h1>
          SQL NOT NULL Constraint
        </h1>

        <font size="5">
         

          <p>The NOT NULL constraint enforces a column to NOT accept NULL values.</p>

          <p>The NOT NULL constraint enforces a field to always contain a value. This means that you cannot insert a new record, or update a record without adding a value to this field.</p>



          <p>The following SQL enforces the &quot;P_Id&quot; column and the &quot;LastName&quot; column to not accept NULL values:</p>



          <table class="code notranslate" cellspacing="0" cellpadding="0" border="0" width="100%">

            <tr>
              <td>
                CREATE TABLE Persons<br />

                (<br />

                P_Id int NOT NULL,<br />

                LastName varchar(255) NOT NULL,<br />

                FirstName varchar(255),<br />

                Address varchar(255),<br />

                City varchar(255)<br />

                )
              </td>
            </tr>
          </table>

          <br />

          <table class="chapter" border="0" width="100%" cellspacing="0" cellpadding="0">
            <tr>

              <td class="prev">
                <a class="chapter" href="sql_constraints.asp"> Previous</a>
              </td>

              <td class="next">
                <a class="chapter" href="sql_unique.asp">Next Chapter </a>
              </td>

            </tr>
          </table>




        </font>

      </body>
    </html>
  </NOT_NULL>

  <UNIQUE>
    <html>
      <body>
        <h1>
          SQL UNIQUE Constraint
        </h1>

        <font size="5">
         

          <p>The UNIQUE constraint uniquely identifies each record in a database table.</p>

          <p>The UNIQUE and PRIMARY KEY constraints both provide a guarantee for uniqueness for a column or set of columns.</p>

          <p>A PRIMARY KEY constraint automatically has a UNIQUE constraint defined on it.</p>

          <p>Note that you can have many UNIQUE constraints per table, but only one PRIMARY KEY constraint per table.</p>

          <hr />



          <h2>SQL UNIQUE Constraint on CREATE TABLE</h2>

          <p>The following SQL creates a UNIQUE constraint on the &quot;P_Id&quot; column when the &quot;Persons&quot; table is created:</p>



          <p>
            <b>MySQL:</b>
          </p>

          <table class="code notranslate" cellspacing="0" cellpadding="0" border="0" width="100%">

            <tr>
              <td>
                CREATE TABLE Persons<br />

                (<br />

                P_Id int NOT NULL,<br />

                LastName varchar(255) NOT NULL,<br />

                FirstName varchar(255),<br />

                Address varchar(255),<br />

                City varchar(255),<br />

                UNIQUE (P_Id)<br />

                )
              </td>
            </tr>
          </table>



          <p>
            <b>SQL Server / Oracle / MS Access:</b>
          </p>

          <table class="code notranslate" cellspacing="0" cellpadding="0" border="0" width="100%">

            <tr>
              <td>
                CREATE TABLE Persons<br />

                (<br />

                P_Id int NOT NULL UNIQUE,<br />

                LastName varchar(255) NOT NULL,<br />

                FirstName varchar(255),<br />

                Address varchar(255),<br />

                City varchar(255)<br />

                )
              </td>
            </tr>
          </table>



          <p>To allow naming of a UNIQUE constraint, and for defining a UNIQUE constraint on multiple columns, use the following SQL syntax:</p>



          <p>
            <b>MySQL / SQL Server / Oracle / MS Access:</b>
          </p>

          <table class="code notranslate" cellspacing="0" cellpadding="0" border="0" width="100%">

            <tr>
              <td>
                CREATE TABLE Persons<br />

                (<br />

                P_Id int NOT NULL,<br />

                LastName varchar(255) NOT NULL,<br />

                FirstName varchar(255),<br />

                Address varchar(255),<br />

                City varchar(255),<br />

                CONSTRAINT uc_PersonID UNIQUE (P_Id,LastName)<br />

                )
              </td>
            </tr>
          </table>

          <br />

          <hr />



          <h1>SQL UNIQUE Constraint on ALTER TABLE</h1>

          <p>To create a UNIQUE constraint on the &quot;P_Id&quot; column when the table is already created, use the following SQL:</p>



          <p>
            <b>MySQL / SQL Server / Oracle / MS Access:</b>
          </p>

          <table class="code notranslate" cellspacing="0" cellpadding="0" border="0" width="100%">

            <tr>
              <td>
                ALTER TABLE Persons<br />

                ADD UNIQUE (P_Id)
              </td>
            </tr>
          </table>



          <p>To allow naming of a UNIQUE constraint, and for defining a UNIQUE constraint on multiple columns, use the following SQL syntax:</p>



          <p>
            <b>MySQL / SQL Server / Oracle / MS Access:</b>
          </p>

          <table class="code notranslate" cellspacing="0" cellpadding="0" border="0" width="100%">

            <tr>
              <td>
                ALTER TABLE Persons<br />

                ADD CONSTRAINT uc_PersonID UNIQUE (P_Id,LastName)
              </td>
            </tr>
          </table>

          <br />

          <hr />



          <h2>To DROP a UNIQUE Constraint</h2>

          <p>To drop a UNIQUE constraint, use the following SQL:</p>



          <p>
            <b>MySQL:</b>
          </p>

          <table class="code notranslate" cellspacing="0" cellpadding="0" border="0" width="100%">

            <tr>
              <td>
                ALTER TABLE Persons<br />

                DROP INDEX uc_PersonID
              </td>
            </tr>
          </table>



          <p>
            <b>SQL Server / Oracle / MS Access:</b>
          </p>

          <table class="code notranslate" cellspacing="0" cellpadding="0" border="0" width="100%">

            <tr>
              <td>
                ALTER TABLE Persons<br />

                DROP CONSTRAINT uc_PersonID
              </td>
            </tr>
          </table>

          <br />

          <table class="chapter" border="0" width="100%" cellspacing="0" cellpadding="0">
            <tr>

              <td class="prev">
                <a class="chapter" href="sql_notnull.asp"> Previous</a>
              </td>

              <td class="next">
                <a class="chapter" href="sql_primarykey.asp">Next Chapter </a>
              </td>

            </tr>
          </table>




        </font>

      </body>
    </html>
  </UNIQUE>

  <PRIMARY_KEY>
    <html>
      <body>
        <h1>
          SQL PRIMARY KEY Constraint
        </h1>

        <font size="5">
         

          <p>The PRIMARY KEY constraint uniquely identifies each record in a database table.</p>

          <p>Primary keys must contain unique values.</p>

          <p>A primary key column cannot contain NULL values.</p>

          <p>Each table should have a primary key, and each table can have only ONE primary key.</p>

          <hr />



          <h1>SQL PRIMARY KEY Constraint on CREATE TABLE</h1>

          <p>The following SQL creates a PRIMARY KEY on the &quot;P_Id&quot; column when the &quot;Persons&quot; table is created:</p>



          <p>
            <b>MySQL:</b>
          </p>

          <table class="code notranslate" cellspacing="0" cellpadding="0" border="0" width="100%">

            <tr>
              <td>
                CREATE TABLE Persons<br />

                (<br />

                P_Id int NOT NULL,<br />

                LastName varchar(255) NOT NULL,<br />

                FirstName varchar(255),<br />

                Address varchar(255),<br />

                City varchar(255),<br />

                PRIMARY KEY (P_Id)<br />

                )
              </td>
            </tr>
          </table>



          <p>
            <b>SQL Server / Oracle / MS Access:</b>
          </p>

          <table class="code notranslate" cellspacing="0" cellpadding="0" border="0" width="100%">

            <tr>
              <td>
                CREATE TABLE Persons<br />

                (<br />

                P_Id int NOT NULL PRIMARY KEY,<br />

                LastName varchar(255) NOT NULL,<br />

                FirstName varchar(255),<br />

                Address varchar(255),<br />

                City varchar(255)<br />

                )
              </td>
            </tr>
          </table>



          <p>To allow naming of a PRIMARY KEY constraint, and for defining a PRIMARY KEY constraint on multiple columns, use the following SQL syntax:</p>



          <p>
            <b>MySQL / SQL Server / Oracle / MS Access:</b>
          </p>

          <table class="code notranslate" cellspacing="0" cellpadding="0" border="0" width="100%">

            <tr>
              <td>
                CREATE TABLE Persons<br />

                (<br />

                P_Id int NOT NULL,<br />

                LastName varchar(255) NOT NULL,<br />

                FirstName varchar(255),<br />

                Address varchar(255),<br />

                City varchar(255),<br />

                CONSTRAINT pk_PersonID PRIMARY KEY (P_Id,LastName)<br />

                )
              </td>
            </tr>
          </table>

          <br />

          <hr />



          <h1>SQL PRIMARY KEY Constraint on ALTER TABLE</h1>

          <p>To create a PRIMARY KEY constraint on the &quot;P_Id&quot; column when the table is already created, use the following SQL:</p>



          <p>
            <b>MySQL / SQL Server / Oracle / MS Access:</b>
          </p>

          <table class="code notranslate" cellspacing="0" cellpadding="0" border="0" width="100%">

            <tr>
              <td>
                ALTER TABLE Persons<br />

                ADD PRIMARY KEY (P_Id)
              </td>
            </tr>
          </table>



          <p>To allow naming of a PRIMARY KEY constraint, and for defining a PRIMARY KEY constraint on multiple columns, use the following SQL syntax:</p>



          <p>
            <b>MySQL / SQL Server / Oracle / MS Access:</b>
          </p>

          <table class="code notranslate" cellspacing="0" cellpadding="0" border="0" width="100%">

            <tr>
              <td>
                ALTER TABLE Persons<br />

                ADD CONSTRAINT pk_PersonID PRIMARY KEY (P_Id,LastName)
              </td>
            </tr>
          </table>



          <p>
            <b>Note:</b> If you use the ALTER TABLE statement to add a primary key, the primary key column(s) must

            already have been declared to not contain NULL values (when the table was first created).
          </p>

          <hr />



          <h1>To DROP a PRIMARY KEY Constraint</h1>

          <p>To drop a PRIMARY KEY constraint, use the following SQL:</p>



          <p>
            <b>MySQL:</b>
          </p>

          <table class="code notranslate" cellspacing="0" cellpadding="0" border="0" width="100%">

            <tr>
              <td>
                ALTER TABLE Persons<br />

                DROP PRIMARY KEY
              </td>
            </tr>
          </table>



          <p>
            <b>SQL Server / Oracle / MS Access:</b>
          </p>

          <table class="code notranslate" cellspacing="0" cellpadding="0" border="0" width="100%">

            <tr>
              <td>
                ALTER TABLE Persons<br />

                DROP CONSTRAINT pk_PersonID
              </td>
            </tr>
          </table>

          <br />

          <table class="chapter" border="0" width="100%" cellspacing="0" cellpadding="0">
            <tr>

              <td class="prev">
                <a class="chapter" href="sql_unique.asp"> Previous</a>
              </td>

              <td class="next">
                <a class="chapter" href="sql_foreignkey.asp">Next Chapter </a>
              </td>

            </tr>
          </table>


        </font>

      </body>
    </html>
  </PRIMARY_KEY>

  <FOREIGN_KEY>
    <html>
      <body>
        <h1>
          SQL FOREIGN KEY Constraint
        </h1>

        <font size="5">
         
          <p>A FOREIGN KEY in one table points to a PRIMARY KEY in another table.</p>

          <p>Let's illustrate the foreign key with an example. Look at the following two tables:</p>



          <p>The &quot;Persons&quot; table:</p>

          <table class="reference" cellspacing="0" cellpadding="0" border="1" width="100%">

            <tr>

              <th align="left">P_Id</th>

              <th align="left">LastName</th>

              <th align="left">FirstName</th>

              <th align="left">Address</th>

              <th align="left">City</th>

            </tr>

            <tr>

              <td>1</td>

              <td>Hansen</td>

              <td>Ola</td>

              <td>Timoteivn 10</td>

              <td>Sandnes</td>

            </tr>

            <tr>

              <td>2</td>

              <td>Svendson</td>

              <td>Tove</td>

              <td>Borgvn 23</td>

              <td>Sandnes</td>

            </tr>

            <tr>

              <td>3</td>

              <td>Pettersen</td>

              <td>Kari</td>

              <td>Storgt 20</td>

              <td>Stavanger</td>

            </tr>

          </table>

          <p>The &quot;Orders&quot; table:</p>

          <table class="reference" cellspacing="0" cellpadding="0" border="1" width="50%">

            <tr>

              <th width="15%" align="left">O_Id</th>

              <th width="20%" align="left">OrderNo</th>

              <th width="15%" align="left">P_Id</th>

            </tr>

            <tr>

              <td>1</td>

              <td>77895</td>

              <td>3</td>

            </tr>

            <tr>

              <td>2</td>

              <td>44678</td>

              <td>3</td>

            </tr>

            <tr>

              <td>3</td>

              <td>22456</td>

              <td>2</td>

            </tr>

            <tr>

              <td>4</td>

              <td>24562</td>

              <td>1</td>

            </tr>

          </table>

          <p>Note that the &quot;P_Id&quot; column in the &quot;Orders&quot; table points to the &quot;P_Id&quot; column in the &quot;Persons&quot; table.</p>

          <p>The &quot;P_Id&quot; column in the &quot;Persons&quot; table is the PRIMARY KEY in the &quot;Persons&quot; table.</p>

          <p>The &quot;P_Id&quot; column in the &quot;Orders&quot; table is a FOREIGN KEY in the &quot;Orders&quot; table.</p>

          <p>The FOREIGN KEY constraint is used to prevent actions that would destroy links between tables.</p>

          <p>
            The FOREIGN KEY constraint also prevents that invalid data form being inserted into the foreign key column,

            because it has to be one of the values contained in the table it points to.
          </p>

          <hr />



          <h1>SQL FOREIGN KEY Constraint on CREATE TABLE</h1>

          <p>The following SQL creates a FOREIGN KEY on the &quot;P_Id&quot; column when the &quot;Orders&quot; table is created:</p>



          <p>
            <b>MySQL:</b>
          </p>

          <table class="code notranslate" cellspacing="0" cellpadding="0" border="0" width="100%">

            <tr>
              <td>
                CREATE TABLE Orders<br />

                (<br />

                O_Id int NOT NULL,<br />

                OrderNo int NOT NULL,<br />

                P_Id int,<br />

                PRIMARY KEY (O_Id),<br />

                FOREIGN KEY (P_Id) REFERENCES Persons(P_Id)<br />

                )
              </td>
            </tr>
          </table>



          <p>
            <b>SQL Server / Oracle / MS Access:</b>
          </p>

          <table class="code notranslate" cellspacing="0" cellpadding="0" border="0" width="100%">

            <tr>
              <td>
                CREATE TABLE Orders<br />

                (<br />

                O_Id int NOT NULL PRIMARY KEY,<br />

                OrderNo int NOT NULL,<br />

                P_Id int FOREIGN KEY REFERENCES Persons(P_Id)<br />

                )
              </td>
            </tr>
          </table>



          <p>To allow naming of a FOREIGN KEY constraint, and for defining a FOREIGN KEY constraint on multiple columns, use the following SQL syntax:</p>

          <p>
            <b>MySQL / SQL Server / Oracle / MS Access:</b>
          </p>

          <table class="code notranslate" cellspacing="0" cellpadding="0" border="0" width="100%">

            <tr>
              <td>
                CREATE TABLE Orders<br />

                (<br />

                O_Id int NOT NULL,<br />

                OrderNo int NOT NULL,<br />

                P_Id int,<br />

                PRIMARY KEY (O_Id),<br />

                CONSTRAINT fk_PerOrders FOREIGN KEY (P_Id)<br />

                REFERENCES Persons(P_Id)<br />

                )
              </td>
            </tr>
          </table>

          <br />

          <hr />



          <h1>SQL FOREIGN KEY Constraint on ALTER TABLE</h1>

          <p>To create a FOREIGN KEY constraint on the &quot;P_Id&quot; column when the &quot;Orders&quot; table is already created, use the following SQL:</p>

          <p>
            <b>MySQL / SQL Server / Oracle / MS Access:</b>
          </p>

          <table class="code notranslate" cellspacing="0" cellpadding="0" border="0" width="100%">

            <tr>
              <td>
                ALTER TABLE Orders<br />

                ADD FOREIGN KEY (P_Id)<br />

                REFERENCES Persons(P_Id)
              </td>
            </tr>
          </table>



          <p>To allow naming of a FOREIGN KEY constraint, and for defining a FOREIGN KEY constraint on multiple columns, use the following SQL syntax:</p>

          <p>
            <b>MySQL / SQL Server / Oracle / MS Access:</b>
          </p>

          <table class="code notranslate" cellspacing="0" cellpadding="0" border="0" width="100%">

            <tr>
              <td>
                ALTER TABLE Orders<br />

                ADD CONSTRAINT fk_PerOrders<br />

                FOREIGN KEY (P_Id)<br />

                REFERENCES Persons(P_Id)
              </td>
            </tr>
          </table>

          <br />

          <hr />



          <h2>To DROP a FOREIGN KEY Constraint</h2>

          <p>To drop a FOREIGN KEY constraint, use the following SQL:</p>

          <p>
            <b>MySQL:</b>
          </p>

          <table class="code notranslate" cellspacing="0" cellpadding="0" border="0" width="100%">

            <tr>
              <td>
                ALTER TABLE Orders<br />

                DROP FOREIGN KEY fk_PerOrders
              </td>
            </tr>
          </table>



          <p>
            <b>SQL Server / Oracle / MS Access:</b>
          </p>

          <table class="code notranslate" cellspacing="0" cellpadding="0" border="0" width="100%">

            <tr>
              <td>
                ALTER TABLE Orders<br />

                DROP CONSTRAINT fk_PerOrders
              </td>
            </tr>
          </table>

          <br />

          <table class="chapter" border="0" width="100%" cellspacing="0" cellpadding="0">
            <tr>

              <td class="prev">
                <a class="chapter" href="sql_primarykey.asp"> Previous</a>
              </td>

              <td class="next">
                <a class="chapter" href="sql_check.asp">Next Chapter </a>
              </td>

            </tr>
          </table>


        </font>

      </body>
    </html>
  </FOREIGN_KEY>

  <CHECK>
    <html>
      <body>
        <h1>
          SQL CHECK Constraint
        </h1>

        <font size="5">
          
          <p>The CHECK constraint is used to limit the value range that can be placed in a column.</p>

          <p>If you define a CHECK constraint on a single column it allows only certain values for this column.</p>

          <p>If you define a CHECK constraint on a table it can limit the values in certain columns based on values in other columns in the row.</p>

          <hr />



          <h1>SQL CHECK Constraint on CREATE TABLE</h1>

          <p>
            The following SQL creates a CHECK constraint on the &quot;P_Id&quot; column when the &quot;Persons&quot; table is created.

            The CHECK constraint specifies that the column &quot;P_Id&quot; must only include integers greater than 0.
          </p>



          <p>
            <b>My SQL:</b>
          </p>

          <table class="code notranslate" cellspacing="0" cellpadding="0" border="0" width="100%">

            <tr>
              <td>
                CREATE TABLE Persons<br />

                (<br />

                P_Id int NOT NULL,<br />

                LastName varchar(255) NOT NULL,<br />

                FirstName varchar(255),<br />

                Address varchar(255),<br />

                City varchar(255),<br />

                CHECK (P_Id&gt;0)<br />

                )
              </td>
            </tr>
          </table>



          <p>
            <b>SQL Server / Oracle / MS Access:</b>
          </p>

          <table class="code notranslate" cellspacing="0" cellpadding="0" border="0" width="100%">

            <tr>
              <td>
                CREATE TABLE Persons<br />

                (<br />

                P_Id int NOT NULL CHECK (P_Id&gt;0),<br />

                LastName varchar(255) NOT NULL,<br />

                FirstName varchar(255),<br />

                Address varchar(255),<br />

                City varchar(255)<br />

                )
              </td>
            </tr>
          </table>



          <p>To allow naming of a CHECK constraint, and for defining a CHECK constraint on multiple columns, use the following SQL syntax:</p>

          <p>
            <b>MySQL / SQL Server / Oracle / MS Access:</b>
          </p>

          <table class="code notranslate" cellspacing="0" cellpadding="0" border="0" width="100%">

            <tr>
              <td>
                CREATE TABLE Persons<br />

                (<br />

                P_Id int NOT NULL,<br />

                LastName varchar(255) NOT NULL,<br />

                FirstName varchar(255),<br />

                Address varchar(255),<br />

                City varchar(255),<br />

                CONSTRAINT chk_Person CHECK (P_Id&gt;0 AND City='Sandnes')<br />

                )
              </td>
            </tr>
          </table>

          <br />

          <hr />



          <h1>SQL CHECK Constraint on ALTER TABLE</h1>

          <p>To create a CHECK constraint on the &quot;P_Id&quot; column when the table is already created, use the following SQL:</p>

          <p>
            <b>MySQL / SQL Server / Oracle / MS Access:</b>
          </p>

          <table class="code notranslate" cellspacing="0" cellpadding="0" border="0" width="100%">

            <tr>
              <td>
                ALTER TABLE Persons<br />

                ADD CHECK (P_Id&gt;0)
              </td>
            </tr>
          </table>



          <p>To allow naming of a CHECK constraint, and for defining a CHECK constraint on multiple columns, use the following SQL syntax:</p>

          <p>
            <b>MySQL / SQL Server / Oracle / MS Access:</b>
          </p>

          <table class="code notranslate" cellspacing="0" cellpadding="0" border="0" width="100%">

            <tr>
              <td>
                ALTER TABLE Persons<br />

                ADD CONSTRAINT chk_Person CHECK (P_Id&gt;0 AND City='Sandnes')
              </td>
            </tr>
          </table>

          <br />

          <hr />



          <h1>To DROP a CHECK Constraint</h1>

          <p>To drop a CHECK constraint, use the following SQL:</p>

          <p>
            <b>SQL Server / Oracle / MS Access:</b>
          </p>

          <table class="code notranslate" cellspacing="0" cellpadding="0" border="0" width="100%">

            <tr>
              <td>
                ALTER TABLE Persons<br />

                DROP CONSTRAINT chk_Person
              </td>
            </tr>
          </table>

          <br />

          <table class="chapter" border="0" width="100%" cellspacing="0" cellpadding="0">
            <tr>

              <td class="prev">
                <a class="chapter" href="sql_foreignkey.asp"> Previous</a>
              </td>

              <td class="next">
                <a class="chapter" href="sql_default.asp">Next Chapter </a>
              </td>

            </tr>
          </table>




        </font>

      </body>
    </html>
  </CHECK>

  <DEFAULT>
    <html>
      <body>
        <h1>
          SQL DEFAULT Constraint
        </h1>

        <font size="5">
         

          <p>The DEFAULT constraint is used to insert a default value into a column.</p>

          <p>The default value will be added to all new records, if no other value is specified.</p>

          <hr />



          <h1>SQL DEFAULT Constraint on CREATE TABLE</h1>

          <p>The following SQL creates a DEFAULT constraint on the &quot;City&quot; column when the &quot;Persons&quot; table is created:</p>



          <p>
            <b>My SQL / SQL Server / Oracle / MS Access:</b>
          </p>

          <table class="code notranslate" cellspacing="0" cellpadding="0" border="0" width="100%">

            <tr>
              <td>
                CREATE TABLE Persons<br />

                (<br />

                P_Id int NOT NULL,<br />

                LastName varchar(255) NOT NULL,<br />

                FirstName varchar(255),<br />

                Address varchar(255),<br />

                City varchar(255) DEFAULT 'Sandnes'<br />

                )
              </td>
            </tr>
          </table>



          <p>The DEFAULT constraint can also be used to insert system values, by using functions like GETDATE():</p>

          <table class="code notranslate" cellspacing="0" cellpadding="0" border="0" width="100%">

            <tr>
              <td>
                CREATE TABLE Orders<br />

                (<br />

                O_Id int NOT NULL,<br />

                OrderNo int NOT NULL,<br />

                P_Id int,<br />

                OrderDate date DEFAULT GETDATE()<br />

                )
              </td>
            </tr>
          </table>

          <br />

          <hr />



          <h1>SQL DEFAULT Constraint on ALTER TABLE</h1>

          <p>To create a DEFAULT constraint on the &quot;City&quot; column when the table is already created, use the following SQL:</p>

          <p>
            <b>MySQL:</b>
          </p>

          <table class="code notranslate" cellspacing="0" cellpadding="0" border="0" width="100%">

            <tr>
              <td>
                ALTER TABLE Persons<br />

                ALTER City SET DEFAULT 'SANDNES'
              </td>
            </tr>
          </table>



          <p>
            <b>SQL Server / Oracle / MS Access:</b>
          </p>

          <table class="code notranslate" cellspacing="0" cellpadding="0" border="0" width="100%">

            <tr>
              <td>
                ALTER TABLE Persons<br />

                ALTER COLUMN City SET DEFAULT 'SANDNES'
              </td>
            </tr>
          </table>

          <br />

          <hr />



          <h1>To DROP a DEFAULT Constraint</h1>

          <p>To drop a DEFAULT constraint, use the following SQL:</p>

          <p>
            <b>MySQL:</b>
          </p>

          <table class="code notranslate" cellspacing="0" cellpadding="0" border="0" width="100%">

            <tr>
              <td>
                ALTER TABLE Persons<br />

                ALTER City DROP DEFAULT
              </td>
            </tr>
          </table>



          <p>
            <b>SQL Server / Oracle / MS Access:</b>
          </p>

          <table class="code notranslate" cellspacing="0" cellpadding="0" border="0" width="100%">

            <tr>
              <td>
                ALTER TABLE Persons<br />

                ALTER COLUMN City DROP DEFAULT
              </td>
            </tr>
          </table>

          <br />

          <table class="chapter" border="0" width="100%" cellspacing="0" cellpadding="0">
            <tr>

              <td class="prev">
                <a class="chapter" href="sql_check.asp"> Previous</a>
              </td>

              <td class="next">
                <a class="chapter" href="sql_create_index.asp">Next Chapter </a>
              </td>

            </tr>
          </table>




        </font>

      </body>
    </html>
  </DEFAULT>

  <DROP>
    <html>
      <body>
        <h1>
          The DROP INDEX Statement
        </h1>

        <font size="5">
         

          <p>The DROP INDEX statement is used to delete an index in a table.</p>



          <h1>DROP INDEX Syntax for MS Access:</h1>

          <table class="code notranslate" cellspacing="0" cellpadding="0" border="0" width="100%">

            <tr>
              <td>DROP INDEX index_name ON table_name</td>
            </tr>
          </table>



          <h1>DROP INDEX Syntax for MS SQL Server:</h1>

          <table class="code notranslate" cellspacing="0" cellpadding="0" border="0" width="100%">

            <tr>
              <td>DROP INDEX table_name.index_name</td>
            </tr>
          </table>



          <h1>DROP INDEX Syntax for DB2/Oracle:</h1>

          <table class="code notranslate" cellspacing="0" cellpadding="0" border="0" width="100%">

            <tr>
              <td>DROP INDEX index_name</td>
            </tr>
          </table>



          <h1>DROP INDEX Syntax for MySQL:</h1>

          <table class="code notranslate" cellspacing="0" cellpadding="0" border="0" width="100%">

            <tr>
              <td>ALTER TABLE table_name DROP INDEX index_name</td>
            </tr>
          </table>

          <br />

          <hr />



          <h1>The DROP TABLE Statement</h1>

          <p>The DROP TABLE statement is used to delete a table.</p>

          <table class="code notranslate" cellspacing="0" cellpadding="0" border="0" width="100%">

            <tr>
              <td>DROP TABLE table_name</td>
            </tr>
          </table>

          <br />

          <hr />



          <h1>The DROP DATABASE Statement</h1>

          <p>The DROP DATABASE statement is used to delete a database.</p>

          <table class="code notranslate" cellspacing="0" cellpadding="0" border="0" width="100%">

            <tr>
              <td>DROP DATABASE database_name</td>
            </tr>
          </table>

          <br />

          <hr />



          <h1>The TRUNCATE TABLE Statement</h1>

          <p>What if we only want to delete the data inside the table, and not the table itself?</p>

          <p>Then, use the TRUNCATE TABLE statement:</p>

          <table class="code notranslate" cellspacing="0" cellpadding="0" border="0" width="100%">

            <tr>
              <td>TRUNCATE TABLE table_name</td>
            </tr>
          </table>

          <br />

          <table class="chapter" border="0" width="100%" cellspacing="0" cellpadding="0">
            <tr>

              <td class="prev">
                <a class="chapter" href="sql_create_index.asp"> Previous</a>
              </td>

              <td class="next">
                <a class="chapter" href="sql_alter.asp">Next Chapter </a>
              </td>

            </tr>
          </table>


        </font>

      </body>
    </html>
  </DROP>

  <ALTER>
    <html>
      <body>
        <h1>
          The ALTER TABLE Statement
        </h1>

        <font size="5">
         

          <p>The ALTER TABLE statement is used to add, delete, or modify columns in an existing table.</p>

          <h1>SQL ALTER TABLE Syntax</h1>

          <p>To add a column in a table, use the following syntax:</p>



          <table class="code notranslate" cellspacing="0" cellpadding="0" border="0" width="100%">

            <tr>
              <td>
                ALTER TABLE table_name<br />

                ADD column_name datatype
              </td>
            </tr>
          </table>



          <p>
            To delete a column in a table, use the following syntax (notice that some

            database systems don't allow deleting a column):
          </p>



          <table class="code notranslate" cellspacing="0" cellpadding="0" border="0" width="100%">

            <tr>
              <td>
                ALTER TABLE table_name<br />

                DROP COLUMN column_name
              </td>
            </tr>
          </table>



          <p>To change the data type of a column in a table, use the following syntax:</p>



          <table class="code notranslate" cellspacing="0" cellpadding="0" border="0" width="100%">

            <tr>
              <td>
                ALTER TABLE table_name<br />

                ALTER COLUMN column_name datatype
              </td>
            </tr>
          </table>

          <br />

          <hr />



          <h1>SQL ALTER TABLE Example</h1>

          <p>Look at the &quot;Persons&quot; table:</p>

          <table class="reference" cellspacing="0" cellpadding="0" border="1" width="100%">

            <tr>

              <th align="left">P_Id</th>

              <th align="left">LastName</th>

              <th align="left">FirstName</th>

              <th align="left">Address</th>

              <th align="left">City</th>

            </tr>

            <tr>

              <td>1</td>

              <td>Hansen</td>

              <td>Ola</td>

              <td>Timoteivn 10</td>

              <td>Sandnes</td>

            </tr>

            <tr>

              <td>2</td>

              <td>Svendson</td>

              <td>Tove</td>

              <td>Borgvn 23</td>

              <td>Sandnes</td>

            </tr>

            <tr>

              <td>3</td>

              <td>Pettersen</td>

              <td>Kari</td>

              <td>Storgt 20</td>

              <td>Stavanger</td>

            </tr>

          </table>

          <p>Now we want to add a column named &quot;DateOfBirth&quot; in the &quot;Persons&quot; table.</p>

          <p>We use the following SQL statement:</p>



          <table class="code notranslate" cellspacing="0" cellpadding="0" border="0" width="100%">

            <tr>
              <td>
                ALTER TABLE Persons<br />

                ADD DateOfBirth date
              </td>
            </tr>
          </table>



          <p>
            Notice that the new column, &quot;DateOfBirth&quot;, is of type date and is going to hold a

            date. The data type specifies what type of data the column can hold. For a complete

            reference of all the data types available in MS Access, MySQL, and SQL Server,

            go to our complete <a href="sql_datatypes.asp">Data Types reference</a>.
          </p>



          <p>The &quot;Persons&quot; table will now like this:</p>

          <table class="reference" cellspacing="0" cellpadding="0" border="1" width="100%">

            <tr>

              <th align="left">P_Id</th>

              <th align="left">LastName</th>

              <th align="left">FirstName</th>

              <th align="left">Address</th>

              <th align="left">City</th>

              <th align="left">DateOfBirth</th>

            </tr>

            <tr>

              <td>1</td>

              <td>Hansen</td>

              <td>Ola</td>

              <td>Timoteivn 10</td>

              <td>Sandnes</td>

             
            </tr>

            <tr>

              <td>2</td>

              <td>Svendson</td>

              <td>Tove</td>

              <td>Borgvn 23</td>

              <td>Sandnes</td>

              

            </tr>

            <tr>

              <td>3</td>

              <td>Pettersen</td>

              <td>Kari</td>

              <td>Storgt 20</td>

              <td>Stavanger</td>

              

            </tr>

          </table>

          <br />

          <hr />



          <h1>Change Data Type Example</h1>

          <p>Now we want to change the data type of the column named &quot;DateOfBirth&quot; in the &quot;Persons&quot; table.</p>

          <p>We use the following SQL statement:</p>



          <table class="code notranslate" cellspacing="0" cellpadding="0" border="0" width="100%">

            <tr>
              <td>
                ALTER TABLE Persons<br />

                ALTER COLUMN DateOfBirth year
              </td>
            </tr>
          </table>



          <p>Notice that the &quot;DateOfBirth&quot; column is now of type year and is going to hold a year in a two-digit or four-digit format.</p>

          <hr />



          <h1>DROP COLUMN Example</h1>

          <p>Next, we want to delete the column named &quot;DateOfBirth&quot; in the &quot;Persons&quot; table.</p>

          <p>We use the following SQL statement:</p>



          <table class="code notranslate" cellspacing="0" cellpadding="0" border="0" width="100%">

            <tr>
              <td>
                ALTER TABLE Persons<br />

                DROP COLUMN DateOfBirth
              </td>
            </tr>
          </table>



          <p>The &quot;Persons&quot; table will now like this:</p>

          <table class="reference" cellspacing="0" cellpadding="0" border="1" width="100%">

            <tr>

              <th align="left">P_Id</th>

              <th align="left">LastName</th>

              <th align="left">FirstName</th>

              <th align="left">Address</th>

              <th align="left">City</th>

            </tr>

            <tr>

              <td>1</td>

              <td>Hansen</td>

              <td>Ola</td>

              <td>Timoteivn 10</td>

              <td>Sandnes</td>

            </tr>

            <tr>

              <td>2</td>

              <td>Svendson</td>

              <td>Tove</td>

              <td>Borgvn 23</td>

              <td>Sandnes</td>

            </tr>

            <tr>

              <td>3</td>

              <td>Pettersen</td>

              <td>Kari</td>

              <td>Storgt 20</td>

              <td>Stavanger</td>

            </tr>

          </table>

          <br />

          <table class="chapter" border="0" width="100%" cellspacing="0" cellpadding="0">
            <tr>

              <td class="prev">
                <a class="chapter" href="sql_drop.asp"> Previous</a>
              </td>

              <td class="next">
                <a class="chapter" href="sql_autoincrement.asp">Next Chapter </a>
              </td>

            </tr>
          </table>




        </font>

      </body>
    </html>
  </ALTER>

  <SQL_VIEWS>
    <html>
      <body>
        <h1>
          SQL CREATE VIEW Statement
        </h1>

        <font size="5">
          

          <p>In SQL, a view is a virtual table based on the result-set of an SQL statement.</p>

          <p>A view contains rows and columns, just like a real table. The fields in a view are fields from one or more real tables in the database.</p>

          <p>You can add SQL functions, WHERE, and JOIN statements to a view and present the data as if the data were coming from one single table.</p>



          <h1>SQL CREATE VIEW Syntax</h1>

          <table class="code notranslate" cellspacing="0" cellpadding="0" border="0" width="100%">

            <tr>
              <td>
                CREATE VIEW view_name AS<br />

                SELECT column_name(s)<br />

                FROM table_name<br />

                WHERE condition
              </td>
            </tr>
          </table>



          <p>
            <b>Note:</b> A view always shows up-to-date data! The database engine recreates the data, using the view's SQL statement, every time a user queries a view.
          </p>

          <hr />



          <h2>SQL CREATE VIEW Examples</h2>

          <p>If you have the Northwind database you can see that it has several views installed by default.</p>

          <p>
            The view &quot;Current Product List&quot; lists all active products (products that are not

            discontinued) from the &quot;Products&quot; table. The view is created with the following SQL:
          </p>



          <table class="code notranslate" cellspacing="0" cellpadding="0" border="0" width="100%">

            <tr>
              <td>
                CREATE VIEW [Current Product List] AS<br />

                SELECT ProductID,ProductName<br />

                FROM Products<br />

                WHERE Discontinued=No
              </td>
            </tr>
          </table>



          <p>We can query the view above as follows:</p>



          <table class="code notranslate" cellspacing="0" cellpadding="0" border="0" width="100%">

            <tr>
              <td>SELECT * FROM [Current Product List]</td>
            </tr>
          </table>



          <p>
            Another view in the Northwind sample database selects every product in the &quot;Products&quot; table

            with a unit price higher than the average unit price:
          </p>



          <table class="code notranslate" cellspacing="0" cellpadding="0" border="0" width="100%">

            <tr>
              <td>
                CREATE VIEW [Products Above Average Price] AS<br />

                SELECT ProductName,UnitPrice<br />

                FROM Products<br />

                WHERE UnitPrice&gt;(SELECT AVG(UnitPrice) FROM Products)
              </td>
            </tr>
          </table>



          <p>We can query the view above as follows:</p>



          <table class="code notranslate" cellspacing="0" cellpadding="0" border="0" width="100%">

            <tr>
              <td>SELECT * FROM [Products Above Average Price]</td>
            </tr>
          </table>



          <p>
            Another view in the Northwind database calculates

            the total sale for each category in 1997. Note that this view selects its data

            from another view called &quot;Product Sales for 1997&quot;:
          </p>



          <table class="code notranslate" cellspacing="0" cellpadding="0" border="0" width="100%">

            <tr>
              <td>
                CREATE VIEW [Category Sales For 1997] AS<br />

                SELECT DISTINCT CategoryName,Sum(ProductSales) AS CategorySales<br />

                FROM [Product Sales for 1997]<br />

                GROUP BY CategoryName
              </td>
            </tr>
          </table>



          <p>We can query the view above as follows:</p>



          <table class="code notranslate" cellspacing="0" cellpadding="0" border="0" width="100%">

            <tr>
              <td>SELECT * FROM [Category Sales For 1997]</td>
            </tr>
          </table>



          <p>We can also add a condition to the query. Now we want to see the total sale only for the category &quot;Beverages&quot;:</p>



          <table class="code notranslate" cellspacing="0" cellpadding="0" border="0" width="100%">

            <tr>
              <td>
                SELECT * FROM [Category Sales For 1997]<br />

                WHERE CategoryName='Beverages'
              </td>
            </tr>
          </table>

          <br />

          <hr />



          <h1>SQL Updating a View</h1>

          <p>You can update a view by using the following syntax:</p>



          <h1>SQL CREATE OR REPLACE VIEW Syntax</h1>

          <table class="code notranslate" cellspacing="0" cellpadding="0" border="0" width="100%">

            <tr>
              <td>
                CREATE OR REPLACE VIEW view_name AS<br />

                SELECT column_name(s)<br />

                FROM table_name<br />

                WHERE condition
              </td>
            </tr>
          </table>



          <p>Now we want to add the &quot;Category&quot; column to the &quot;Current Product List&quot; view. We will update the view with the following SQL:</p>



          <table class="code notranslate" cellspacing="0" cellpadding="0" border="0" width="100%">

            <tr>
              <td>
                CREATE VIEW [Current Product List] AS<br />

                SELECT ProductID,ProductName,Category<br />

                FROM Products<br />

                WHERE Discontinued=No
              </td>
            </tr>
          </table>

          <br />

          <hr />



          <h1>SQL Dropping a View</h1>

          <p>You can delete a view with the DROP VIEW command.</p>



          <h1>SQL DROP VIEW Syntax</h1>

          <table class="code notranslate" cellspacing="0" cellpadding="0" border="0" width="100%">

            <tr>
              <td>DROP VIEW view_name</td>
            </tr>
          </table>

          <br />

         
          


        </font>

      </body>
    </html>
  </SQL_VIEWS>

  <CREATE_INDEX>
    <html>
      <body>
        <h1>
          SQL CREATE INDEX Syntax
        </h1>

        <font size="5">
          

          <p>Creates an index on a table. Duplicate values are allowed:</p>

          <table class="code notranslate" cellspacing="0" cellpadding="0" border="0" width="100%">

            <tr>
              <td>
                CREATE INDEX index_name<br />

                ON table_name (column_name)
              </td>
            </tr>
          </table>



          <h1>SQL CREATE UNIQUE INDEX Syntax</h1>

          <p>Creates a unique index on a table. Duplicate values are not allowed:</p>

          <table class="code notranslate" cellspacing="0" cellpadding="0" border="0" width="100%">

            <tr>
              <td>
                CREATE UNIQUE INDEX index_name<br />

                ON table_name (column_name)
              </td>
            </tr>
          </table>

          <p>
            <b>Note:</b> The syntax for creating indexes varies amongst different databases. Therefore: Check the syntax for creating indexes in your database.
          </p>

          <hr />



          <h1>CREATE INDEX Example</h1>

          <p>The SQL statement below creates an index named &quot;PIndex&quot; on the &quot;LastName&quot; column in the &quot;Persons&quot; table:</p>

          <table class="code notranslate" cellspacing="0" cellpadding="0" border="0" width="100%">

            <tr>
              <td>
                CREATE INDEX PIndex<br />

                ON Persons (LastName)
              </td>
            </tr>
          </table>



          <p>If you want to create an index on a combination of columns, you can list the column names within the parentheses, separated by commas:</p>

          <table class="code notranslate" cellspacing="0" cellpadding="0" border="0" width="100%">

            <tr>
              <td>
                CREATE INDEX PIndex<br />

                ON Persons (LastName, FirstName)
              </td>
            </tr>
          </table>

          <br />


        </font>

      </body>
    </html>
  </CREATE_INDEX>

  <FUNCTION>
    <html>
      <body>
        <h1>
          SQL Aggregate Functions
        </h1>

        <font size="5">
         

          <p>SQL aggregate functions return a single value, calculated from values in a column.</p>

          <p>Useful aggregate functions:</p>

          <ul>

            <li>AVG() - Returns the average value</li>

            <li>COUNT() - Returns the number of rows</li>

            <li>FIRST() - Returns the first value</li>

            <li>LAST() - Returns the last value</li>

            <li>MAX() - Returns the largest value</li>

            <li>MIN() - Returns the smallest value</li>

            <li>SUM() - Returns the sum</li>

          </ul>

          <hr />



          <h1>SQL Scalar functions</h1>

          <p>SQL scalar functions return a single value, based on the input value.</p>

          <p>Useful scalar functions:</p>

          <ul>

            <li>UCASE() - Converts a field to upper case</li>

            <li>LCASE() - Converts a field to lower case</li>

            <li>MID() - Extract characters from a text field</li>

            <li>LEN() - Returns the length of a text field</li>

            <li>
              ROUND() - Rounds a numeric field to the number of

              decimals specified
            </li>

            <li>NOW() - Returns the current system date and time</li>

            <li>FORMAT() - Formats how a field is to be displayed</li>

          </ul>

          <p>
            <b>Tip:</b> The aggregate functions and the scalar functions will be explained in details in the next chapters.
          </p>

          <br />


        </font>

      </body>
    </html>
  </FUNCTION>

  <AVERAGE>
    <html>
      <body>
        <h1>
          SQL AVG() Example
        </h1>

        <font size="5">
        

          <p>We have the following &quot;Orders&quot; table:</p>

          <table class="reference" cellspacing="0" cellpadding="0" border="1" width="100%">

            <tr>

              <th align="left">O_Id</th>

              <th align="left">OrderDate</th>

              <th align="left">OrderPrice</th>

              <th align="left">Customer</th>

            </tr>

            <tr>

              <td>1</td>

              <td>2008/11/12</td>

              <td>1000</td>

              <td>Hansen</td>

            </tr>

            <tr>

              <td>2</td>

              <td>2008/10/23</td>

              <td>1600</td>

              <td>Nilsen</td>

            </tr>

            <tr>

              <td>3</td>

              <td>2008/09/02</td>

              <td>700</td>

              <td>Hansen</td>

            </tr>

            <tr>

              <td>4</td>

              <td>2008/09/03</td>

              <td>300</td>

              <td>Hansen</td>

            </tr>

            <tr>

              <td>5</td>

              <td>2008/08/30</td>

              <td>2000</td>

              <td>Jensen</td>

            </tr>

            <tr>

              <td>6</td>

              <td>2008/10/04</td>

              <td>100</td>

              <td>Nilsen</td>

            </tr>

          </table>



          <p>Now we want to find the average value of the &quot;OrderPrice&quot; fields.</p>

          <p>We use the following SQL statement:</p>



          <table class="code notranslate" cellspacing="0" cellpadding="0" border="0" width="100%">

            <tr>
              <td>SELECT AVG(OrderPrice) AS OrderAverage FROM Orders</td>
            </tr>
          </table>



          <p>The result-set will look like this:</p>

          <table class="reference" cellspacing="0" cellpadding="0" border="1" width="50%">

            <tr>

              <th align="left">OrderAverage</th>

            </tr>

            <tr>

              <td>950</td>

            </tr>

          </table>



          <p>Now we want to find the customers that have an OrderPrice value higher than the average OrderPrice value.</p>

          <p>We use the following SQL statement:</p>



          <table class="code notranslate" cellspacing="0" cellpadding="0" border="0" width="100%">

            <tr>
              <td>
                SELECT Customer FROM Orders<br />

                WHERE OrderPrice&gt;(SELECT AVG(OrderPrice) FROM Orders)
              </td>
            </tr>
          </table>



          <p>The result-set will look like this:</p>

          <table class="reference" cellspacing="0" cellpadding="0" border="1" width="50%">

            <tr>

              <th align="left">Customer</th>

            </tr>

            <tr>

              <td>Hansen</td>

            </tr>

            <tr>

              <td>Nilsen</td>

            </tr>

            <tr>

              <td>Jensen</td>

            </tr>

          </table>

          <br />


        </font>

      </body>
    </html>
  </AVERAGE>

  <COUNT>
    <html>
      <body>
        <h1>
          SQL COUNT(column_name) Syntax
        </h1>

        <font size="5">
         
          <p>The COUNT(column_name) function returns the number of values (NULL values will not be counted) of the specified column:</p>



          <table class="code notranslate" cellspacing="0" cellpadding="0" border="0" width="100%">

            <tr>
              <td>SELECT COUNT(column_name) FROM table_name</td>
            </tr>
          </table>



          <h1>SQL COUNT(*) Syntax</h1>

          <p>The COUNT(*) function returns the number of records in a table:</p>



          <table class="code notranslate" cellspacing="0" cellpadding="0" border="0" width="100%">

            <tr>
              <td>SELECT COUNT(*) FROM table_name</td>
            </tr>
          </table>



          <h1>SQL COUNT(DISTINCT column_name) Syntax</h1>

          <p>
            The COUNT(DISTINCT column_name) function returns the number of distinct

            values of the specified column:
          </p>



          <table class="code notranslate" cellspacing="0" cellpadding="0" border="0" width="100%">

            <tr>
              <td>SELECT COUNT(DISTINCT column_name) FROM table_name</td>
            </tr>
          </table>



          <p>
            <b>Note:</b> COUNT(DISTINCT) works with ORACLE and Microsoft SQL Server, but not with Microsoft Access.
          </p>

          <hr />



          <h1>SQL COUNT(column_name) Example</h1>

          <p>We have the following &quot;Orders&quot; table:</p>

          <table class="reference" cellspacing="0" cellpadding="0" border="1" width="100%">

            <tr>

              <th align="left">O_Id</th>

              <th align="left">OrderDate</th>

              <th align="left">OrderPrice</th>

              <th align="left">Customer</th>

            </tr>

            <tr>

              <td>1</td>

              <td>2008/11/12</td>

              <td>1000</td>

              <td>Hansen</td>

            </tr>

            <tr>

              <td>2</td>

              <td>2008/10/23</td>

              <td>1600</td>

              <td>Nilsen</td>

            </tr>

            <tr>

              <td>3</td>

              <td>2008/09/02</td>

              <td>700</td>

              <td>Hansen</td>

            </tr>

            <tr>

              <td>4</td>

              <td>2008/09/03</td>

              <td>300</td>

              <td>Hansen</td>

            </tr>

            <tr>

              <td>5</td>

              <td>2008/08/30</td>

              <td>2000</td>

              <td>Jensen</td>

            </tr>

            <tr>

              <td>6</td>

              <td>2008/10/04</td>

              <td>100</td>

              <td>Nilsen</td>

            </tr>

          </table>



          <p>Now we want to count the number of orders from &quot;Customer Nilsen&quot;.</p>

          <p>We use the following SQL statement:</p>



          <table class="code notranslate" cellspacing="0" cellpadding="0" border="0" width="100%">

            <tr>
              <td>
                SELECT COUNT(Customer) AS CustomerNilsen FROM Orders<br />

                WHERE Customer='Nilsen'
              </td>
            </tr>
          </table>



          <p>The result of the SQL statement above will be 2, because the customer Nilsen has made 2 orders in total:</p>

          <table class="reference" cellspacing="0" cellpadding="0" border="1" width="50%">

            <tr>

              <th align="left">CustomerNilsen</th>

            </tr>

            <tr>

              <td>2</td>

            </tr>

          </table>

          <br />

          <hr />



          <h1>SQL COUNT(*) Example</h1>

          <p>If we omit the WHERE clause, like this:</p>



          <table class="code notranslate" cellspacing="0" cellpadding="0" border="0" width="100%">

            <tr>
              <td>SELECT COUNT(*) AS NumberOfOrders FROM Orders</td>
            </tr>
          </table>



          <p>The result-set will look like this:</p>

          <table class="reference" cellspacing="0" cellpadding="0" border="1" width="50%">

            <tr>

              <th align="left">NumberOfOrders</th>

            </tr>

            <tr>

              <td>6</td>

            </tr>

          </table>

          <p>which is the total number of rows in the table.</p>

          <hr />



          <h1>SQL COUNT(DISTINCT column_name) Example</h1>

          <p>Now we want to count the number of unique customers in the &quot;Orders&quot; table.</p>

          <p>We use the following SQL statement:</p>



          <table class="code notranslate" cellspacing="0" cellpadding="0" border="0" width="100%">

            <tr>
              <td>SELECT COUNT(DISTINCT Customer) AS NumberOfCustomers FROM Orders</td>
            </tr>
          </table>



          <p>The result-set will look like this:</p>

          <table class="reference" cellspacing="0" cellpadding="0" border="1" width="50%">

            <tr>

              <th align="left">NumberOfCustomers</th>

            </tr>

            <tr>

              <td>3</td>

            </tr>

          </table>

          <p>which is the number of unique customers (Hansen, Nilsen, and Jensen) in the &quot;Orders&quot; table.</p>

          <br />


        </font>

      </body>
    </html>
  </COUNT>

  <FIRST>
    <html>
      <body>
        <h1>
          The FIRST() Function
        </h1>

        <font size="5">
         

          <p>The FIRST() function returns the first value of the selected column.</p>



          <h1>SQL FIRST() Syntax</h1>

          <table class="code notranslate" cellspacing="0" cellpadding="0" border="0" width="100%">

            <tr>
              <td>SELECT FIRST(column_name) FROM table_name</td>
            </tr>
          </table>

          <br />

          <hr />



          <h1>SQL FIRST() Example</h1>

          <p>We have the following &quot;Orders&quot; table:</p>

          <table class="reference" cellspacing="0" cellpadding="0" border="1" width="100%">

            <tr>

              <th align="left">O_Id</th>

              <th align="left">OrderDate</th>

              <th align="left">OrderPrice</th>

              <th align="left">Customer</th>

            </tr>

            <tr>

              <td>1</td>

              <td>2008/11/12</td>

              <td>1000</td>

              <td>Hansen</td>

            </tr>

            <tr>

              <td>2</td>

              <td>2008/10/23</td>

              <td>1600</td>

              <td>Nilsen</td>

            </tr>

            <tr>

              <td>3</td>

              <td>2008/09/02</td>

              <td>700</td>

              <td>Hansen</td>

            </tr>

            <tr>

              <td>4</td>

              <td>2008/09/03</td>

              <td>300</td>

              <td>Hansen</td>

            </tr>

            <tr>

              <td>5</td>

              <td>2008/08/30</td>

              <td>2000</td>

              <td>Jensen</td>

            </tr>

            <tr>

              <td>6</td>

              <td>2008/10/04</td>

              <td>100</td>

              <td>Nilsen</td>

            </tr>

          </table>

          <p>Now we want to find the first value of the &quot;OrderPrice&quot; column.</p>

          <p>We use the following SQL statement:</p>



          <table class="code notranslate" cellspacing="0" cellpadding="0" border="0" width="100%">

            <tr>
              <td>SELECT FIRST(OrderPrice) AS FirstOrderPrice FROM Orders</td>
            </tr>
          </table>



          <p>
            <img src="lamp.gif" alt="Note" /> <b>Tip:</b> Workaround if FIRST() function is not supported:
          </p>

          <table class="code notranslate" cellspacing="0" cellpadding="0" border="0" width="100%" id="table1">

            <tr>
              <td>SELECT OrderPrice FROM Orders ORDER BY O_Id LIMIT 1</td>
            </tr>
          </table>



          <p>The result-set will look like this:</p>

          <table class="reference" cellspacing="0" cellpadding="0" border="1" width="50%">

            <tr>

              <th align="left">FirstOrderPrice</th>

            </tr>

            <tr>

              <td>1000</td>

            </tr>

          </table>

          <br />


        </font>

      </body>
    </html>
  </FIRST>

  <LAST>
    <html>
      <body>
        <h1>
          The LAST() Function
        </h1>

        <font size="5">
         

          <p>The LAST() function returns the last value of the selected column.</p>



          <h1>SQL LAST() Syntax</h1>

          <table class="code notranslate" cellspacing="0" cellpadding="0" border="0" width="100%">

            <tr>
              <td>SELECT LAST(column_name) FROM table_name</td>
            </tr>
          </table>

          <br />

          <hr />



          <h1>SQL LAST() Example</h1>

          <p>We have the following &quot;Orders&quot; table:</p>

          <table class="reference" cellspacing="0" cellpadding="0" border="1" width="100%">

            <tr>

              <th align="left">O_Id</th>

              <th align="left">OrderDate</th>

              <th align="left">OrderPrice</th>

              <th align="left">Customer</th>

            </tr>

            <tr>

              <td>1</td>

              <td>2008/11/12</td>

              <td>1000</td>

              <td>Hansen</td>

            </tr>

            <tr>

              <td>2</td>

              <td>2008/10/23</td>

              <td>1600</td>

              <td>Nilsen</td>

            </tr>

            <tr>

              <td>3</td>

              <td>2008/09/02</td>

              <td>700</td>

              <td>Hansen</td>

            </tr>

            <tr>

              <td>4</td>

              <td>2008/09/03</td>

              <td>300</td>

              <td>Hansen</td>

            </tr>

            <tr>

              <td>5</td>

              <td>2008/08/30</td>

              <td>2000</td>

              <td>Jensen</td>

            </tr>

            <tr>

              <td>6</td>

              <td>2008/10/04</td>

              <td>100</td>

              <td>Nilsen</td>

            </tr>

          </table>



          <p>Now we want to find the last value of the &quot;OrderPrice&quot; column.</p>

          <p>We use the following SQL statement:</p>



          <table class="code notranslate" cellspacing="0" cellpadding="0" border="0" width="100%">

            <tr>
              <td>SELECT LAST(OrderPrice) AS LastOrderPrice FROM Orders</td>
            </tr>
          </table>



          <p>
            <img src="lamp.gif" alt="Note" /> <b>Tip:</b> Workaround if LAST() function is not supported:
          </p>

          <table class="code notranslate" cellspacing="0" cellpadding="0" border="0" width="100%" id="table1">

            <tr>
              <td>SELECT OrderPrice FROM Orders ORDER BY O_Id DESC LIMIT 1</td>
            </tr>
          </table>



          <p>The result-set will look like this:</p>

          <table class="reference" cellspacing="0" cellpadding="0" border="1" width="50%">

            <tr>

              <th align="left">LastOrderPrice</th>

            </tr>

            <tr>

              <td>100</td>

            </tr>

          </table>

          <br />


        </font>

      </body>
    </html>
  </LAST>

  <MAX>
    <html>
      <body>
        <h1>
          The MAX() Function
        </h1>

        <font size="5">
         

          <p>The MAX() function returns the largest value of the selected column.</p>



          <h1>SQL MAX() Syntax</h1>

          <table class="code notranslate" cellspacing="0" cellpadding="0" border="0" width="100%">

            <tr>
              <td>SELECT MAX(column_name) FROM table_name</td>
            </tr>
          </table>

          <br />

          <hr />



          <h1>SQL MAX() Example</h1>

          <p>We have the following &quot;Orders&quot; table:</p>

          <table class="reference" cellspacing="0" cellpadding="0" border="1" width="100%">

            <tr>

              <th align="left">O_Id</th>

              <th align="left">OrderDate</th>

              <th align="left">OrderPrice</th>

              <th align="left">Customer</th>

            </tr>

            <tr>

              <td>1</td>

              <td>2008/11/12</td>

              <td>1000</td>

              <td>Hansen</td>

            </tr>

            <tr>

              <td>2</td>

              <td>2008/10/23</td>

              <td>1600</td>

              <td>Nilsen</td>

            </tr>

            <tr>

              <td>3</td>

              <td>2008/09/02</td>

              <td>700</td>

              <td>Hansen</td>

            </tr>

            <tr>

              <td>4</td>

              <td>2008/09/03</td>

              <td>300</td>

              <td>Hansen</td>

            </tr>

            <tr>

              <td>5</td>

              <td>2008/08/30</td>

              <td>2000</td>

              <td>Jensen</td>

            </tr>

            <tr>

              <td>6</td>

              <td>2008/10/04</td>

              <td>100</td>

              <td>Nilsen</td>

            </tr>

          </table>

          <p>Now we want to find the largest value of the &quot;OrderPrice&quot; column.</p>

          <p>We use the following SQL statement:</p>



          <table class="code notranslate" cellspacing="0" cellpadding="0" border="0" width="100%">

            <tr>
              <td>SELECT MAX(OrderPrice) AS LargestOrderPrice FROM Orders</td>
            </tr>
          </table>



          <p>The result-set will look like this:</p>

          <table class="reference" cellspacing="0" cellpadding="0" border="1" width="50%">

            <tr>

              <th align="left">LargestOrderPrice</th>

            </tr>

            <tr>

              <td>2000</td>

            </tr>

          </table>

          <br />


        </font>

      </body>
    </html>
  </MAX>

  <MIN>
    <html>
      <body>
        <h1>
          The MIN() Function
        </h1>

        <font size="5">
         

          <p>The MIN() function returns the smallest value of the selected column.</p>



          <h1>SQL MIN() Syntax</h1>

          <table class="code notranslate" cellspacing="0" cellpadding="0" border="0" width="100%">

            <tr>
              <td>SELECT MIN(column_name) FROM table_name</td>
            </tr>
          </table>

          <br />

          <hr />



          <h1>SQL MIN() Example</h1>

          <p>We have the following &quot;Orders&quot; table:</p>

          <table class="reference" cellspacing="0" cellpadding="0" border="1" width="100%">

            <tr>

              <th align="left">O_Id</th>

              <th align="left">OrderDate</th>

              <th align="left">OrderPrice</th>

              <th align="left">Customer</th>

            </tr>

            <tr>

              <td>1</td>

              <td>2008/11/12</td>

              <td>1000</td>

              <td>Hansen</td>

            </tr>

            <tr>

              <td>2</td>

              <td>2008/10/23</td>

              <td>1600</td>

              <td>Nilsen</td>

            </tr>

            <tr>

              <td>3</td>

              <td>2008/09/02</td>

              <td>700</td>

              <td>Hansen</td>

            </tr>

            <tr>

              <td>4</td>

              <td>2008/09/03</td>

              <td>300</td>

              <td>Hansen</td>

            </tr>

            <tr>

              <td>5</td>

              <td>2008/08/30</td>

              <td>2000</td>

              <td>Jensen</td>

            </tr>

            <tr>

              <td>6</td>

              <td>2008/10/04</td>

              <td>100</td>

              <td>Nilsen</td>

            </tr>

          </table>

          <p>Now we want to find the smallest value of the &quot;OrderPrice&quot; column.</p>

          <p>We use the following SQL statement:</p>



          <table class="code notranslate" cellspacing="0" cellpadding="0" border="0" width="100%">

            <tr>
              <td>SELECT MIN(OrderPrice) AS SmallestOrderPrice FROM Orders</td>
            </tr>
          </table>



          <p>The result-set will look like this:</p>

          <table class="reference" cellspacing="0" cellpadding="0" border="1" width="50%">

            <tr>

              <th align="left">SmallestOrderPrice</th>

            </tr>

            <tr>

              <td>100</td>

            </tr>

          </table>

          <br />


        </font>

      </body>
    </html>
  </MIN>

  <SUM>
    <html>
      <body>
        <h1>
          The SUM() Function
        </h1>

        <font size="5">
         

          <p>The SUM() function returns the total sum of a numeric column.</p>



          <h1>SQL SUM() Syntax</h1>

          <table class="code notranslate" cellspacing="0" cellpadding="0" border="0" width="100%">

            <tr>
              <td>SELECT SUM(column_name) FROM table_name</td>
            </tr>
          </table>

          <br />

          <hr />



          <h1>SQL SUM() Example</h1>

          <p>We have the following &quot;Orders&quot; table:</p>

          <table class="reference" cellspacing="0" cellpadding="0" border="1" width="100%">

            <tr>

              <th align="left">O_Id</th>

              <th align="left">OrderDate</th>

              <th align="left">OrderPrice</th>

              <th align="left">Customer</th>

            </tr>

            <tr>

              <td>1</td>

              <td>2008/11/12</td>

              <td>1000</td>

              <td>Hansen</td>

            </tr>

            <tr>

              <td>2</td>

              <td>2008/10/23</td>

              <td>1600</td>

              <td>Nilsen</td>

            </tr>

            <tr>

              <td>3</td>

              <td>2008/09/02</td>

              <td>700</td>

              <td>Hansen</td>

            </tr>

            <tr>

              <td>4</td>

              <td>2008/09/03</td>

              <td>300</td>

              <td>Hansen</td>

            </tr>

            <tr>

              <td>5</td>

              <td>2008/08/30</td>

              <td>2000</td>

              <td>Jensen</td>

            </tr>

            <tr>

              <td>6</td>

              <td>2008/10/04</td>

              <td>100</td>

              <td>Nilsen</td>

            </tr>

          </table>

          <p>Now we want to find the sum of all &quot;OrderPrice&quot; fields&quot;.</p>

          <p>We use the following SQL statement:</p>



          <table class="code notranslate" cellspacing="0" cellpadding="0" border="0" width="100%">

            <tr>
              <td>SELECT SUM(OrderPrice) AS OrderTotal FROM Orders</td>
            </tr>
          </table>



          <p>The result-set will look like this:</p>

          <table class="reference" cellspacing="0" cellpadding="0" border="1" width="50%">

            <tr>

              <th align="left">OrderTotal</th>

            </tr>

            <tr>

              <td>5700</td>

            </tr>

          </table>

          <br />


        </font>

      </body>
    </html>
  </SUM>

  <GROUP_BY>
    <html>
      <body>
        <h1>
          The GROUP BY Statement
        </h1>

        <font size="5">
        

          <p>The GROUP BY statement is used in conjunction with the aggregate functions to group the result-set by one or more columns.</p>



          <h1>SQL GROUP BY Syntax</h1>

          <table class="code notranslate" cellspacing="0" cellpadding="0" border="0" width="100%">

            <tr>
              <td>
                SELECT column_name, aggregate_function(column_name)<br />

                FROM table_name<br />

                WHERE column_name operator value<br />

                GROUP BY column_name
              </td>

            </tr>
          </table>

          <br />

          <hr />



          <h1>SQL GROUP BY Example</h1>

          <p>We have the following &quot;Orders&quot; table:</p>

          <table class="reference" cellspacing="0" cellpadding="0" border="1" width="100%">

            <tr>

              <th align="left">O_Id</th>

              <th align="left">OrderDate</th>

              <th align="left">OrderPrice</th>

              <th align="left">Customer</th>

            </tr>

            <tr>

              <td>1</td>

              <td>2008/11/12</td>

              <td>1000</td>

              <td>Hansen</td>

            </tr>

            <tr>

              <td>2</td>

              <td>2008/10/23</td>

              <td>1600</td>

              <td>Nilsen</td>

            </tr>

            <tr>

              <td>3</td>

              <td>2008/09/02</td>

              <td>700</td>

              <td>Hansen</td>

            </tr>

            <tr>

              <td>4</td>

              <td>2008/09/03</td>

              <td>300</td>

              <td>Hansen</td>

            </tr>

            <tr>

              <td>5</td>

              <td>2008/08/30</td>

              <td>2000</td>

              <td>Jensen</td>

            </tr>

            <tr>

              <td>6</td>

              <td>2008/10/04</td>

              <td>100</td>

              <td>Nilsen</td>

            </tr>

          </table>



          <p>Now we want to find the total sum (total order) of each customer.</p>

          <p>We will have to use the GROUP BY statement to group the customers.</p>

          <p>We use the following SQL statement:</p>



          <table class="code notranslate" cellspacing="0" cellpadding="0" border="0" width="100%">

            <tr>
              <td>
                SELECT Customer,SUM(OrderPrice) FROM Orders<br />

                GROUP BY Customer
              </td>
            </tr>
          </table>



          <p>The result-set will look like this:</p>

          <table class="reference" cellspacing="0" cellpadding="0" border="1" width="50%">

            <tr>

              <th align="left">Customer</th>

              <th align="left">SUM(OrderPrice)</th>

            </tr>

            <tr>

              <td>Hansen</td>

              <td>2000</td>

            </tr>

            <tr>

              <td>Nilsen</td>

              <td>1700</td>

            </tr>

            <tr>

              <td>Jensen</td>

              <td>2000</td>

            </tr>

          </table>



          <p>Nice! Isn't it? :)</p>

          <p>Let's see what happens if we omit the GROUP BY statement:</p>



          <table class="code notranslate" cellspacing="0" cellpadding="0" border="0" width="100%">

            <tr>
              <td>SELECT Customer,SUM(OrderPrice) FROM Orders</td>
            </tr>
          </table>



          <p>The result-set will look like this:</p>

          <table class="reference" cellspacing="0" cellpadding="0" border="1" width="50%">

            <tr>

              <th align="left">Customer</th>

              <th align="left">SUM(OrderPrice)</th>

            </tr>

            <tr>

              <td>Hansen</td>

              <td>5700</td>

            </tr>

            <tr>

              <td>Nilsen</td>

              <td>5700</td>

            </tr>

            <tr>

              <td>Hansen</td>

              <td>5700</td>

            </tr>

            <tr>

              <td>Hansen</td>

              <td>5700</td>

            </tr>

            <tr>

              <td>Jensen</td>

              <td>5700</td>

            </tr>

            <tr>

              <td>Nilsen</td>

              <td>5700</td>

            </tr>

          </table>

          <p>The result-set above is not what we wanted.</p>

          <p>
            <b>Explanation of why the above SELECT statement cannot be used:</b> The SELECT statement above has two columns specified (Customer and SUM(OrderPrice).

            The &quot;SUM(OrderPrice)&quot; returns a single value (that is the total sum of the &quot;OrderPrice&quot; column), while &quot;Customer&quot; returns 6 values

            (one value for each row in the &quot;Orders&quot; table). This will therefore not give us the correct result. However, you have seen that the GROUP BY statement solves this problem.
          </p>

          <hr />



          <h1>GROUP BY More Than One Column</h1>

          <p>We can also use the GROUP BY statement on more than one column, like this:</p>



          <table class="code notranslate" cellspacing="0" cellpadding="0" border="0" width="100%">

            <tr>
              <td>
                SELECT Customer,OrderDate,SUM(OrderPrice) FROM Orders<br />

                GROUP BY Customer,OrderDate
              </td>
            </tr>
          </table>

          <br />


        </font>

      </body>
    </html>
  </GROUP_BY>

  <HAVING>
    <html>
      <body>
        <h1>
          The HAVING Clause
        </h1>

        <font size="5">
         

          <p>The HAVING clause was added to SQL because the WHERE keyword could not be used with aggregate functions.</p>

          <h1>SQL HAVING Syntax</h1>

          <table class="code notranslate" cellspacing="0" cellpadding="0" border="0" width="100%">

            <tr>
              <td>
                SELECT column_name, aggregate_function(column_name)<br />

                FROM table_name<br />

                WHERE column_name operator value<br />

                GROUP BY column_name<br />

                HAVING aggregate_function(column_name) operator value
              </td>

            </tr>
          </table>

          <br />

          <hr />



          <h1>SQL HAVING Example</h1>

          <p>We have the following &quot;Orders&quot; table:</p>

          <table class="reference" cellspacing="0" cellpadding="0" border="1" width="100%">

            <tr>

              <th align="left">O_Id</th>

              <th align="left">OrderDate</th>

              <th align="left">OrderPrice</th>

              <th align="left">Customer</th>

            </tr>

            <tr>

              <td>1</td>

              <td>2008/11/12</td>

              <td>1000</td>

              <td>Hansen</td>

            </tr>

            <tr>

              <td>2</td>

              <td>2008/10/23</td>

              <td>1600</td>

              <td>Nilsen</td>

            </tr>

            <tr>

              <td>3</td>

              <td>2008/09/02</td>

              <td>700</td>

              <td>Hansen</td>

            </tr>

            <tr>

              <td>4</td>

              <td>2008/09/03</td>

              <td>300</td>

              <td>Hansen</td>

            </tr>

            <tr>

              <td>5</td>

              <td>2008/08/30</td>

              <td>2000</td>

              <td>Jensen</td>

            </tr>

            <tr>

              <td>6</td>

              <td>2008/10/04</td>

              <td>100</td>

              <td>Nilsen</td>

            </tr>

          </table>



          <p>Now we want to find if any of the customers have a total order of less than 2000.</p>

          <p>We use the following SQL statement:</p>



          <table class="code notranslate" cellspacing="0" cellpadding="0" border="0" width="100%">

            <tr>
              <td>
                SELECT Customer,SUM(OrderPrice) FROM Orders<br />

                GROUP BY Customer<br />

                HAVING SUM(OrderPrice)&lt;2000
              </td>
            </tr>
          </table>



          <p>The result-set will look like this:</p>

          <table class="reference" cellspacing="0" cellpadding="0" border="1" width="50%">

            <tr>

              <th align="left">Customer</th>

              <th align="left">SUM(OrderPrice)</th>

            </tr>

            <tr>

              <td>Nilsen</td>

              <td>1700</td>

            </tr>

          </table>



          <p>Now we want to find if the customers &quot;Hansen&quot; or &quot;Jensen&quot; have a total order of more than 1500.</p>

          <p>We add an ordinary WHERE clause to the SQL statement:</p>



          <table class="code notranslate" cellspacing="0" cellpadding="0" border="0" width="100%">

            <tr>
              <td>
                SELECT Customer,SUM(OrderPrice) FROM Orders<br />

                WHERE Customer='Hansen' OR Customer='Jensen'<br />

                GROUP BY Customer<br />

                HAVING SUM(OrderPrice)&gt;1500
              </td>
            </tr>
          </table>



          <p>The result-set will look like this:</p>

          <table class="reference" cellspacing="0" cellpadding="0" border="1" width="50%">

            <tr>

              <th align="left">Customer</th>

              <th align="left">SUM(OrderPrice)</th>

            </tr>

            <tr>

              <td>Hansen</td>

              <td>2000</td>

            </tr>

            <tr>

              <td>Jensen</td>

              <td>2000</td>

            </tr>

          </table>

          <br />


        </font>

      </body>
    </html>
  </HAVING>

  <UPPER_CASE>
    <html>
      <body>
        <h1>
          The UCASE() Function
        </h1>

        <font size="5">
         

          <p>The UCASE() function converts the value of a field to uppercase.</p>



          <h1>SQL UCASE() Syntax</h1>

          <table class="code notranslate" cellspacing="0" cellpadding="0" border="0" width="100%">

            <tr>
              <td>SELECT UCASE(column_name) FROM table_name</td>
            </tr>
          </table>



          <h1>Syntax for SQL Server</h1>

          <table class="code notranslate" cellspacing="0" cellpadding="0" border="0" width="100%" id="table1">

            <tr>
              <td>SELECT UPPER(column_name) FROM table_name</td>
            </tr>
          </table>

          <br />

          <hr />



          <h1>SQL UCASE() Example</h1>

          <p>We have the following &quot;Persons&quot; table:</p>

          <table class="reference" cellspacing="0" cellpadding="0" border="1" width="100%">

            <tr>

              <th align="left">P_Id</th>

              <th align="left">LastName</th>

              <th align="left">FirstName</th>

              <th align="left">Address</th>

              <th align="left">City</th>

            </tr>

            <tr>

              <td>1</td>

              <td>Hansen</td>

              <td>Ola</td>

              <td>Timoteivn 10</td>

              <td>Sandnes</td>

            </tr>

            <tr>

              <td>2</td>

              <td>Svendson</td>

              <td>Tove</td>

              <td>Borgvn 23</td>

              <td>Sandnes</td>

            </tr>

            <tr>

              <td>3</td>

              <td>Pettersen</td>

              <td>Kari</td>

              <td>Storgt 20</td>

              <td>Stavanger</td>

            </tr>

          </table>

          <p>Now we want to select the content of the &quot;LastName&quot; and &quot;FirstName&quot; columns above, and convert the &quot;LastName&quot; column to uppercase.</p>

          <p>We use the following SELECT statement:</p>



          <table class="code notranslate" cellspacing="0" cellpadding="0" border="0" width="100%">

            <tr>
              <td>SELECT UCASE(LastName) as LastName,FirstName FROM Persons</td>
            </tr>
          </table>



          <p>The result-set will look like this:</p>

          <table class="reference" cellspacing="0" cellpadding="0" border="1" width="50%">

            <tr>

              <th align="left">LastName</th>

              <th align="left">FirstName</th>

            </tr>

            <tr>

              <td>HANSEN</td>

              <td>Ola</td>

            </tr>

            <tr>

              <td>SVENDSON</td>

              <td>Tove</td>

            </tr>

            <tr>

              <td>PETTERSEN</td>

              <td>Kari</td>

            </tr>

          </table>

          <br />


        </font>

      </body>
    </html>
  </UPPER_CASE>

  <LOWER_CASE>
    <html>
      <body>
        <h1>
          The LCASE() Function
        </h1>

        <font size="5">
        
          <p>The LCASE() function converts the value of a field to lowercase.</p>



          <h1>SQL LCASE() Syntax</h1>

          <table class="code notranslate" cellspacing="0" cellpadding="0" border="0" width="100%">

            <tr>
              <td>SELECT LCASE(column_name) FROM table_name</td>
            </tr>
          </table>



          <h1>Syntax for SQL Server</h1>

          <table class="code notranslate" cellspacing="0" cellpadding="0" border="0" width="100%" id="table1">

            <tr>
              <td>SELECT LOWER(column_name) FROM table_name</td>
            </tr>
          </table>

          <br />

          <hr />



          <h1>SQL LCASE() Example</h1>

          <p>We have the following &quot;Persons&quot; table:</p>

          <table class="reference" cellspacing="0" cellpadding="0" border="1" width="100%">

            <tr>

              <th align="left">P_Id</th>

              <th align="left">LastName</th>

              <th align="left">FirstName</th>

              <th align="left">Address</th>

              <th align="left">City</th>

            </tr>

            <tr>

              <td>1</td>

              <td>Hansen</td>

              <td>Ola</td>

              <td>Timoteivn 10</td>

              <td>Sandnes</td>

            </tr>

            <tr>

              <td>2</td>

              <td>Svendson</td>

              <td>Tove</td>

              <td>Borgvn 23</td>

              <td>Sandnes</td>

            </tr>

            <tr>

              <td>3</td>

              <td>Pettersen</td>

              <td>Kari</td>

              <td>Storgt 20</td>

              <td>Stavanger</td>

            </tr>

          </table>

          <p>Now we want to select the content of the &quot;LastName&quot; and &quot;FirstName&quot; columns above, and convert the &quot;LastName&quot; column to lowercase.</p>

          <p>We use the following SELECT statement:</p>



          <table class="code notranslate" cellspacing="0" cellpadding="0" border="0" width="100%">

            <tr>
              <td>SELECT LCASE(LastName) as LastName,FirstName FROM Persons</td>
            </tr>
          </table>



          <p>The result-set will look like this:</p>

          <table class="reference" cellspacing="0" cellpadding="0" border="1" width="50%">

            <tr>

              <th align="left">LastName</th>

              <th align="left">FirstName</th>

            </tr>

            <tr>

              <td>hansen</td>

              <td>Ola</td>

            </tr>

            <tr>

              <td>svendson</td>

              <td>Tove</td>

            </tr>

            <tr>

              <td>pettersen</td>

              <td>Kari</td>

            </tr>

          </table>

          <br />


        </font>

      </body>
    </html>
  </LOWER_CASE>

  <MID>
    <html>
      <body>
        <h1>
          The MID() Function
        </h1>

        <font size="5">
         

          <p>The MID() function is used to extract characters from a text field.</p>



          <h1>SQL MID() Syntax</h1>

          <table class="code notranslate" cellspacing="0" cellpadding="0" border="0" width="100%">

            <tr>
              <td>SELECT MID(column_name,start[,length]) FROM table_name</td>
            </tr>
          </table>

          <br />



          <table class="reference" cellspacing="0" cellpadding="0" border="1" width="100%">

            <tr>

              <th align="left" valign="top" width="20%">Parameter</th>

              <th align="left" valign="top" width="80%">Description</th>

            </tr>

            <tr>

              <td valign="top">column_name</td>

              <td valign="top">Required. The field to extract characters from</td>

            </tr>

            <tr>

              <td valign="top">start</td>

              <td valign="top">Required. Specifies the starting position (starts at 1)</td>

            </tr>

            <tr>

              <td valign="top">length</td>

              <td valign="top">
                Optional. The number of characters to return. If

                omitted, the MID() function returns the rest of the text
              </td>

            </tr>

          </table>

          <br />

          <hr />



          <h1>SQL MID() Example</h1>

          <p>We have the following &quot;Persons&quot; table:</p>

          <table class="reference" cellspacing="0" cellpadding="0" border="1" width="100%">

            <tr>

              <th align="left">P_Id</th>

              <th align="left">LastName</th>

              <th align="left">FirstName</th>

              <th align="left">Address</th>

              <th align="left">City</th>

            </tr>

            <tr>

              <td>1</td>

              <td>Hansen</td>

              <td>Ola</td>

              <td>Timoteivn 10</td>

              <td>Sandnes</td>

            </tr>

            <tr>

              <td>2</td>

              <td>Svendson</td>

              <td>Tove</td>

              <td>Borgvn 23</td>

              <td>Sandnes</td>

            </tr>

            <tr>

              <td>3</td>

              <td>Pettersen</td>

              <td>Kari</td>

              <td>Storgt 20</td>

              <td>Stavanger</td>

            </tr>

          </table>

          <p>Now we want to extract the first four characters of the &quot;City&quot; column above.</p>

          <p>We use the following SELECT statement:</p>



          <table class="code notranslate" cellspacing="0" cellpadding="0" border="0" width="100%">

            <tr>
              <td>SELECT MID(City,1,4) as SmallCity FROM Persons</td>
            </tr>
          </table>



          <p>The result-set will look like this:</p>

          <table class="reference" cellspacing="0" cellpadding="0" border="1" width="50%">

            <tr>

              <th align="left">SmallCity</th>

            </tr>

            <tr>

              <td>Sand</td>

            </tr>

            <tr>

              <td>Sand</td>

            </tr>

            <tr>

              <td>Stav</td>

            </tr>

          </table>

          <br />


        </font>

      </body>
    </html>
  </MID>

  <LENGTH>
    <html>
      <body>
        <h1>
          The LEN() Function
        </h1>

        <font size="5">
         

          <p>The LEN() function returns the length of the value in a text field.</p>

          <h1>SQL LEN() Syntax</h1>

          <table class="code notranslate" cellspacing="0" cellpadding="0" border="0" width="100%">

            <tr>
              <td>SELECT LEN(column_name) FROM table_name</td>
            </tr>
          </table>

          <br />

          <hr />



          <h1>SQL LEN() Example</h1>

          <p>We have the following &quot;Persons&quot; table:</p>

          <table class="reference" cellspacing="0" cellpadding="0" border="1" width="100%">

            <tr>

              <th align="left">P_Id</th>

              <th align="left">LastName</th>

              <th align="left">FirstName</th>

              <th align="left">Address</th>

              <th align="left">City</th>

            </tr>

            <tr>

              <td>1</td>

              <td>Hansen</td>

              <td>Ola</td>

              <td>Timoteivn 10</td>

              <td>Sandnes</td>

            </tr>

            <tr>

              <td>2</td>

              <td>Svendson</td>

              <td>Tove</td>

              <td>Borgvn 23</td>

              <td>Sandnes</td>

            </tr>

            <tr>

              <td>3</td>

              <td>Pettersen</td>

              <td>Kari</td>

              <td>Storgt 20</td>

              <td>Stavanger</td>

            </tr>

          </table>

          <p>Now we want to select the length of the values in the &quot;Address&quot; column above.</p>

          <p>We use the following SELECT statement:</p>



          <table class="code notranslate" cellspacing="0" cellpadding="0" border="0" width="100%">

            <tr>
              <td>SELECT LEN(Address) as LengthOfAddress FROM Persons</td>
            </tr>
          </table>



          <p>The result-set will look like this:</p>

          <table class="reference" cellspacing="0" cellpadding="0" border="1" width="50%">

            <tr>

              <th align="left">LengthOfAddress</th>

            </tr>

            <tr>

              <td>12</td>

            </tr>

            <tr>

              <td>9</td>

            </tr>

            <tr>

              <td>9</td>

            </tr>

          </table>

          <br />


        </font>

      </body>
    </html>
  </LENGTH>

  <ROUND>
    <html>
      <body>
        <h1>
          The ROUND() Function
        </h1>

        <font size="5">
         

          <p>The ROUND() function is used to round a numeric field to the number of decimals specified.</p>



          <h1>SQL ROUND() Syntax</h1>

          <table class="code notranslate" cellspacing="0" cellpadding="0" border="0" width="100%">

            <tr>
              <td>SELECT ROUND(column_name,decimals) FROM table_name</td>
            </tr>
          </table>

          <br />



          <table class="reference" cellspacing="0" cellpadding="0" border="1" width="100%">

            <tr>

              <th align="left" valign="top" width="20%">Parameter</th>

              <th align="left" valign="top" width="80%">Description</th>

            </tr>

            <tr>

              <td valign="top">column_name</td>

              <td valign="top">   Required. The field to round.</td>

            </tr>

            <tr>

              <td valign="top">decimals</td>

              <td valign="top">
                Required. Specifies the number of decimals to be

                returned.
              </td>

            </tr>

          </table>

          <br />

          <hr />



          <h2>SQL ROUND() Example</h2>

          <p>We have the following &quot;Products&quot; table:</p>

          <table class="reference" cellspacing="0" cellpadding="0" border="1" width="100%">

            <tr>

              <th align="left">Prod_Id</th>

              <th align="left">ProductName</th>

              <th align="left">Unit</th>

              <th align="left">UnitPrice</th>

            </tr>

            <tr>

              <td>1</td>

              <td>Jarlsberg</td>

              <td>1000 g</td>

              <td>10.45</td>

            </tr>

            <tr>

              <td>2</td>

              <td>Mascarpone</td>

              <td>1000 g</td>

              <td>32.56</td>

            </tr>

            <tr>

              <td>3</td>

              <td>Gorgonzola</td>

              <td>1000 g</td>

              <td>15.67</td>

            </tr>

          </table>

          <p>Now we want to display the product name and the price rounded to the nearest integer.</p>

          <p>We use the following SELECT statement:</p>



          <table class="code notranslate" cellspacing="0" cellpadding="0" border="0" width="100%">

            <tr>
              <td>SELECT ProductName, ROUND(UnitPrice,0) as UnitPrice FROM Products</td>
            </tr>
          </table>



          <p>The result-set will look like this:</p>

          <table class="reference" cellspacing="0" cellpadding="0" border="1" width="50%">

            <tr>

              <th align="left">ProductName</th>

              <th align="left">UnitPrice</th>

            </tr>

            <tr>

              <td>Jarlsberg</td>

              <td>10</td>

            </tr>

            <tr>

              <td>Mascarpone</td>

              <td>33</td>

            </tr>

            <tr>

              <td>Gorgonzola</td>

              <td>16</td>

            </tr>

          </table>


        </font>

      </body>
    </html>
  </ROUND>

  <NOW>
    <html>
      <body>
        <h1>
          The NOW() Function
        </h1>

        <font size="5">
        

          <p>The NOW() function returns the current system date and time.</p>



          <h1>SQL NOW() Syntax</h1>

          <table class="code notranslate" cellspacing="0" cellpadding="0" border="0" width="100%">

            <tr>
              <td>SELECT NOW() FROM table_name</td>
            </tr>
          </table>

          <br />

          <hr />



          <h1>SQL NOW() Example</h1>

          <p>We have the following &quot;Products&quot; table:</p>

          <table class="reference" cellspacing="0" cellpadding="0" border="1" width="100%">

            <tr>

              <th align="left">Prod_Id</th>

              <th align="left">ProductName</th>

              <th align="left">Unit</th>

              <th align="left">UnitPrice</th>

            </tr>

            <tr>

              <td>1</td>

              <td>Jarlsberg</td>

              <td>1000 g</td>

              <td>10.45</td>

            </tr>

            <tr>

              <td>2</td>

              <td>Mascarpone</td>

              <td>1000 g</td>

              <td>32.56</td>

            </tr>

            <tr>

              <td>3</td>

              <td>Gorgonzola</td>

              <td>1000 g</td>

              <td>15.67</td>

            </tr>

          </table>

          <p>Now we want to display the products and prices per today's date.</p>

          <p>We use the following SELECT statement:</p>



          <table class="code notranslate" cellspacing="0" cellpadding="0" border="0" width="100%">

            <tr>
              <td>SELECT ProductName, UnitPrice, Now() as PerDate FROM Products</td>
            </tr>
          </table>



          <p>The result-set will look like this:</p>

          <table class="reference" cellspacing="0" cellpadding="0" border="1" width="100%">

            <tr>

              <th align="left">ProductName</th>

              <th align="left">UnitPrice</th>

              <th align="left">PerDate</th>

            </tr>

            <tr>

              <td>Jarlsberg</td>

              <td>10.45</td>

              <td>10/7/2008 11:25:02 AM</td>

            </tr>

            <tr>

              <td>Mascarpone</td>

              <td>32.56</td>

              <td>10/7/2008 11:25:02 AM</td>

            </tr>

            <tr>

              <td>Gorgonzola</td>

              <td>15.67</td>

              <td>10/7/2008 11:25:02 AM</td>

            </tr>

          </table>


        </font>

      </body>
    </html>
  </NOW>

  <FORMAT>
    <html>
      <body>
        <h1>
          The FORMAT() Function
        </h1>

        <font size="5">

        

          <p>The FORMAT() function is used to format how a field is to be displayed.</p>



          <h1>SQL FORMAT() Syntax</h1>

          <table class="code notranslate" cellspacing="0" cellpadding="0" border="0" width="100%">

            <tr>
              <td>SELECT FORMAT(column_name,format) FROM table_name</td>
            </tr>
          </table>

          <br />



          <table class="reference" cellspacing="0" cellpadding="0" border="1" width="100%">

            <tr>

              <th align="left" valign="top" width="20%">Parameter</th>

              <th align="left" valign="top" width="80%">Description</th>

            </tr>

            <tr>

              <td valign="top">column_name</td>

              <td valign="top">Required. The field to be formatted.</td>

            </tr>

            <tr>

              <td valign="top">format</td>

              <td valign="top">Required. Specifies the format.</td>

            </tr>

          </table>

          <br />

          <hr />



          <h1>SQL FORMAT() Example</h1>

          <p>We have the following &quot;Products&quot; table:</p>

          <table class="reference" cellspacing="0" cellpadding="0" border="1" width="100%">

            <tr>

              <th align="left">Prod_Id</th>

              <th align="left">ProductName</th>

              <th align="left">Unit</th>

              <th align="left">UnitPrice</th>

            </tr>

            <tr>

              <td>1</td>

              <td>Jarlsberg</td>

              <td>1000 g</td>

              <td>10.45</td>

            </tr>

            <tr>

              <td>2</td>

              <td>Mascarpone</td>

              <td>1000 g</td>

              <td>32.56</td>

            </tr>

            <tr>

              <td>3</td>

              <td>Gorgonzola</td>

              <td>1000 g</td>

              <td>15.67</td>

            </tr>

          </table>



          <p>Now we want to display the products and prices per today's date (with today's date displayed in the following format &quot;YYYY-MM-DD&quot;).</p>

          <p>We use the following SELECT statement:</p>



          <table class="code notranslate" cellspacing="0" cellpadding="0" border="0" width="100%">

            <tr>
              <td>
                SELECT ProductName, UnitPrice, FORMAT(Now(),'YYYY-MM-DD') as PerDate<br />

                FROM Products
              </td>
            </tr>
          </table>



          <p>The result-set will look like this:</p>

          <table class="reference" cellspacing="0" cellpadding="0" border="1" width="100%">

            <tr>

              <th align="left">ProductName</th>

              <th align="left">UnitPrice</th>

              <th align="left">PerDate</th>

            </tr>

            <tr>

              <td>Jarlsberg</td>

              <td>10.45</td>

              <td>2008-10-07</td>

            </tr>

            <tr>

              <td>Mascarpone</td>

              <td>32.56</td>

              <td>2008-10-07</td>

            </tr>

            <tr>

              <td>Gorgonzola</td>

              <td>15.67</td>

              <td>2008-10-07</td>

            </tr>

          </table>

        </font>

      </body>
    </html>
  </FORMAT>

  <CONCATENATE>
    <html>
      <body>
        <h1>
CONCATENATION
        </h1>

        <font size="5">
          <p/>
            The syntax for CONCAT() is as follows:

            <p/>
              <font color="green">
                <b>CONCAT(str1, str2, str3, ...)</b>
              </font>:  Concatenate str1, str2, str3, and any other strings together.  Please note the Oracle CONCAT() function only allows two arguments -- only two strings can be put together at a time using this function.  However, it is possible to concatenate more than two strings at a time in Oracle using '||'.

              <p/>
                Let's look at some examples.  Assume we have the following table:

                <p/>
                  Table <i>
                    <b>Geography</b>
                  </i>

                  <table class="content" border="1">
                    <tr>
                      <td>region_name</td>
                      <td>store_name</td>
                    </tr>
                    <tr>
                      <td>East</td>
                      <td>Boston</td>
                    </tr>
                    <tr>
                      <td>East</td>
                      <td>New York</td>
                    </tr>
                    <tr>
                      <td>West</td>
                      <td>Los Angeles</td>
                    </tr>
                    <tr>
                      <td>West</td>
                      <td>San Diego</td>
                    </tr>
                  </table>


                  <p/>
                    Example 1:

                    <p/>
                      <b>MySQL/Oracle</b>:
                      <br/>
                        <font>
                          <b>
                            SELECT CONCAT(region_name,store_name) FROM Geography
                            <br/>WHERE store_name = 'Boston';</b>
                        </font>

                        <p/>
                          <i>Result</i>:

                          <p/>
                            <font >
                              <b>'EastBoston'</b>
                            </font>

                            <p/>
                              Example 2:

                              <p/>
                                <b>Oracle</b>:
                                <br/>
                                  <font >
                                    <b>
                                      SELECT region_name || ' ' || store_name FROM Geography
                                      <br/>WHERE store_name = 'Boston';</b>
                                  </font>

                                  <p/>
                                    <i>Result</i>:

                                    <p/>
                                      <font >
                                        <b>'East Boston'</b>
                                      </font>


                                    </font>

      </body>
    </html>
  </CONCATENATE>

  <SUBSTRING>
    <html>
      <body>
        <h1>
SUBSTRING
        </h1>

        <font size="5">
          <p/>
            The Substring function in SQL is used to grab a portion of the stored data.  This
            function is called differently for the different databases:
            <ul>
              <li/>
                MySQL:  SUBSTR(), SUBSTRING()
                <li/>
                  Oracle:  SUBSTR()
                  <li/>SQL Server:  SUBSTRING()
</ul>

            The most frequent uses are as follows (we will use SUBSTR() here):

            <p/>
              <font color="green">
                <b>SUBSTR(str,pos)</b>
              </font>:  Select all characters from &lt;str&gt; starting with position &lt;pos&gt;.  Note that this syntax is not supported in SQL Server.
              <p/>
                <font color="green">
                  <b>SUBSTR(str,pos,len)</b>
                </font>:  Starting with the &lt;pos&gt;th
                character in string &lt;str&gt; and select the next &lt;len&gt; characters.

                <p/>
                  Assume we have the following table:

                  <p/>
                    Table <i>
                      <b>Geography</b>
                    </i>

                    <table class="content" border="1">
                      <tr>
                        <td>region_name</td>
                        <td>store_name</td>
                      </tr>
                      <tr>
                        <td>East</td>
                        <td>Boston</td>
                      </tr>
                      <tr>
                        <td>East</td>
                        <td>New York</td>
                      </tr>
                      <tr>
                        <td>West</td>
                        <td>Los Angeles</td>
                      </tr>
                      <tr>
                        <td>West</td>
                        <td>San Diego</td>
                      </tr>
                    </table>


                    <p/>
                      Example 1:

                      <p/>
                        <font >
                          <b>
                            SELECT SUBSTR(store_name, 3) <br/>
                              FROM Geography <br/>WHERE store_name = 'Los Angeles';</b>
                        </font>

                        <p/>
                          <i>Result</i>:

                          <p/>
                            <font >
                              <b>'s Angeles'</b>
                            </font>

                            <p/>
                              Example 2:

                              <p/>
                                <font >
                                  <b>
                                    SELECT SUBSTR(store_name,2,4) <br/>
                                      FROM Geography <br/>WHERE store_name = 'San Diego';</b>
                                </font>

                                <p/>
                                  <i>Result</i>:

                                  <p/>
                                    <font color="royalblue">
                                      <b>'an D'</b>
                                    </font>

                                  </font>

      </body>
    </html>
  </SUBSTRING>

  <TRIM>
    <html>
      <body>
        <h1>
TRIM
        </h1>

        <font size="5">
          <p/>
            The TRIM function in SQL is used to remove specified prefix or suffix from a string.
            The most common pattern being removed is white spaces.  This function is called
            differently in different databases:
            <ul>
              <li/>
                MySQL:  TRIM(), RTRIM(), LTRIM()
                <li/>
                  Oracle:  RTRIM(), LTRIM()
                  <li/>SQL Server:  RTRIM(), LTRIM()
</ul>

            <p/>
              The syntax for these trim functions are:

              <p/>
                <font >
                  <b>TRIM([[LOCATION] [remstr] FROM ] str)</b>
                </font>:  [LOCATION] can be either LEADING, TRAILING, or BOTH.  This function gets rid of the [remstr] pattern
                from either the beginning of the string or the end of the string, or both.  If no [remstr] is
                specified, white spaces are removed.

                <p/>
                  <font >
                    <b>LTRIM(str)</b>
                  </font>:  Removes all white spaces from the beginning of the string.

                  <p/>
                    <font >
                      <b>RTRIM(str)</b>
                    </font>:  Removes all white spaces at the end of the string.

                    <p/>
                      Example 1:

                      <p/>
                        <font>
                          <b>SELECT TRIM('Sample');</b>
                        </font>

                        <p/>
                          <i>Result</i>:

                          <p/>
                            <font >
                              <b>'Sample'</b>
                            </font>

                            <p/>
                              Example 2:

                              <p/>
                                <font >
                                  <b>SELECT LTRIM('Sample');</b>
                                </font>

                                <p/>
                                  <i>Result</i>:

                                  <p/>
                                    <font >
                                      <b>'Sample'</b>
                                    </font>

                                    <p/>
                                      Example 3:

                                      <p/>
                                        <font >
                                          <b>SELECT RTRIM('Sample');</b>
                                        </font>

                                        <p/>
                                          <i>Result</i>:

                                          <p/>
                                            <font>
                                              <b>'Sample'</b>
                                            </font>


                                          </font>

      </body>
    </html>
  </TRIM>

  <REPLACE>
    <html>
      <body>
        <h1>
REPLACE
        </h1>

        <font size="5">
          <p/>
            The <b>Replace</b> function in SQL is used to update the content of a string.  The function call is REPLACE() for MySQL, Oracle, and SQL Server.  The syntax of the Replace function is:

            <p/>
              <font >
                <b>Replace(str1, str2, str3)</b>
              </font>:  In str1, find where str2 occurs, and replace it with str3.
            <p/>

            <p/>
              Assume we have the following table:

              <p/>
                Table <i>
                  <b>Geography</b>
                </i>

                <table class="content" border="1">
                  <tr>
                    <td>region_name</td>
                    <td>store_name</td>
                  </tr>
                  <tr>
                    <td>East</td>
                    <td>Boston</td>
                  </tr>
                  <tr>
                    <td>East</td>
                    <td>New York</td>
                  </tr>
                  <tr>
                    <td>West</td>
                    <td>Los Angeles</td>
                  </tr>
                  <tr>
                    <td>West</td>
                    <td>San Diego</td>
                  </tr>
                </table>


                <p/>
                  If we apply the following Replace function:

                  <p/>
                    <font >
                      <b>
                        SELECT REPLACE(region_name, 'ast', 'astern')<br/>FROM Geography;</b>
                    </font>

                    <p/>
                      <i>Result</i>:

                      <table class="result" border="1">
                        <tr>
                          <td>region_name</td>
                        </tr>
                        <tr>
                          <td>Eastern</td>
                        </tr>
                        <tr>
                          <td>Eastern</td>
                        </tr>
                        <tr>
                          <td>West</td>
                        </tr>
                        <tr>
                          <td>West</td>
                        </tr>
                      </table>


                    </font>

      </body>
    </html>
  </REPLACE>

  <DATEADD>
    <html>
      <body>
        <h1>
DATEADD
        </h1>

        <font size="5">
          <p/>
            The DATEADD function is used to add an interval to a date.  This function is available in SQL Server.

            <p/>
              The usage for the DATEADD function is

              <p/>
                <b>
                  <font >DATEADD (datepart, number, expression)</font>
                </b>

                <p/>
                  where the data type of &lt;expression&gt; is some type of date, time, or datetime.  &lt;number&gt; is an integer (can be positive or negative).  &lt;datepart&gt; can be one of the following:

                  <p/>
                    <table border="1" cellpadding="3" cellspacing="1" class="content">
                      <tr>
                        <td>datepart</td>
                        <td>abbreviation</td>
                      </tr>
                      <tr>
                        <td>year</td>
                        <td>yy, yyyy</td>
                      </tr>
                      <tr>
                        <td>quarter</td>
                        <td>qq, q</td>
                      </tr>
                      <tr>
                        <td>month</td>
                        <td>mm, m</td>
                      </tr>
                      <tr>
                        <td>dayofyear</td>
                        <td>dy, y</td>
                      </tr>
                      <tr>
                        <td>day</td>
                        <td>dd, d</td>
                      </tr>
                      <tr>
                        <td>week</td>
                        <td>wk, ww</td>
                      </tr>
                      <tr>
                        <td>hour</td>
                        <td>hh</td>
                      </tr>
                      <tr>
                        <td>minute</td>
                        <td>mi, n</td>
                      </tr>
                      <tr>
                        <td>second</td>
                        <td>ss, s</td>
                      </tr>
                      <tr>
                        <td>millisecond</td>
                        <td>ms</td>
                      </tr>
                      <tr>
                        <td>microsecond</td>
                        <td>mcs</td>
                      </tr>
                      <tr>
                        <td>nanosecond</td>
                        <td>ns</td>
                      </tr>
                      <tr>
                        <td>TZoffset</td>
                        <td>tz</td>
                      </tr>
                      <tr>
                        <td>ISO_WEEK</td>
                        <td>isowk, isoww</td>
                      </tr>
                    </table>

                    <p/>
                      The result returned has the same data type as &lt;expression&gt;.
                      <p/>
                        Example:  The SQL statement

                        <p/>
                          <b>
                            <font >SELECT DATEADD(day, 10,'2000-01-05 00:05:00.000');</font>
                          </b>

                          <p/>
                            yields the following result:

                            <p/>
                              <b>
                                <font color="royalblue">'2000-01-15 00:05:00.000'</font>
                              </b>

                            </font>

      </body>
    </html>
  </DATEADD>

  <DATEDIFF>
    <html>
      <body>
        <h1>
DATEDIFF
        </h1>

        <font size="5">
          <p/>
            The DATEDIFF function is used to calculate the difference between two days, and is used in MySQL and SQL Server.  The syntax for this date function is different between these two databases, so each one is discussed below:

            <p/>
              <b>MySQL</b>:

              <p/>
                The usage for the DATEDIFF function in MySQL is

                <p/>
                  <b>
                    <font >DATEDIFF (expression1, expression2)</font>
                  </b>

                  <p/>
                    where the data type of &lt;expression1&gt; and &lt;expression2&gt; is either DATE or DATETIME.  The result is &lt;expression1&gt; - &lt;expression2&gt;.

                    <p/>
                      Example:  The SQL statement

                      <p/>
                        <b>
                          <font >SELECT DATEDIFF('2000-01-10','2000-01-05');</font>
                        </b>

                        <p/>
                          yields the following result:

                          <p/>
                            <b>
                              <font color="royalblue">5</font>
                            </b>

                            <p/>
                              This is because 2000-01-10 is 5 days after 2000-01-05.

                              <p/>
                                <b>SQL Server</b>:

                                <p/>
                                  The usage for the DATEDIFF function in SQL Server is

                                  <p/>
                                    <b>
                                      <font >DATEDIFF (datepart, expression1, expression2)</font>
                                    </b>

                                    <p/>
                                      where the data type of &lt;expression1&gt; and &lt;expression2&gt; is some type of date, time, or datetime.  The result is &lt;expression2&gt; - &lt;expression1&gt;.  datepart can be one of the following:

                                      <p/>
                                        <table border="1" cellpadding="3" cellspacing="1" class="content">
                                          <tr>
                                            <td>datepart</td>
                                            <td>abbreviation</td>
                                          </tr>
                                          <tr>
                                            <td>year</td>
                                            <td>yy, yyyy</td>
                                          </tr>
                                          <tr>
                                            <td>quarter</td>
                                            <td>qq, q</td>
                                          </tr>
                                          <tr>
                                            <td>month</td>
                                            <td>mm, m</td>
                                          </tr>
                                          <tr>
                                            <td>dayofyear</td>
                                            <td>dy, y</td>
                                          </tr>
                                          <tr>
                                            <td>day</td>
                                            <td>dd, d</td>
                                          </tr>
                                          <tr>
                                            <td>week</td>
                                            <td>wk, ww</td>
                                          </tr>
                                          <tr>
                                            <td>hour</td>
                                            <td>hh</td>
                                          </tr>
                                          <tr>
                                            <td>minute</td>
                                            <td>mi, n</td>
                                          </tr>
                                          <tr>
                                            <td>second</td>
                                            <td>ss, s</td>
                                          </tr>
                                          <tr>
                                            <td>millisecond</td>
                                            <td>ms</td>
                                          </tr>
                                          <tr>
                                            <td>microsecond</td>
                                            <td>mcs</td>
                                          </tr>
                                          <tr>
                                            <td>nanosecond</td>
                                            <td>ns</td>
                                          </tr>
                                          <tr>
                                            <td>TZoffset</td>
                                            <td>tz</td>
                                          </tr>
                                          <tr>
                                            <td>ISO_WEEK</td>
                                            <td>isowk, isoww</td>
                                          </tr>
                                        </table>

                                        <p/>
                                          Example:  The SQL statement

                                          <p/>
                                            <b>
                                              <font >SELECT DATEDIFF(day, '2000-01-10','2000-01-05');</font>
                                            </b>

                                            <p/>
                                              yields the following result:

                                              <p/>
                                                <b>
                                                  <font >-5</font>
                                                </b>

                                                <p/>This is because 2000-01-05 is 5 days before 2000-01-10.
 

        </font>

      </body>
    </html>
  </DATEDIFF>

  <GETDATE>
    <html>
      <body>
        <h1>
GETDATE
        </h1>

        <font size="5">
          <p/>
            The GETDATE function is used to retrieve the current database system time in SQL Server.  Its syntax is

            <p/>
              <b>
                <font>GETDATE()</font>
              </b>

              <p/>
                GETDATE does not require any argument.

                <p/>
                  Example:  The SQL statement

                  <p/>
                    <b>
                      <font >SELECT GETDATE();</font>
                    </b>

                    <p/>
                      yields the following result:

                      <p/>
                        <b>
                          <font >'2000-03-15 00:05:02.123'</font>
                        </b>

                        <p/>GETDATE function is most useful when we need to record the time a particular transaction happens.  In SQL Server, we simply insert the value of the GETDATE() function into the table to achieve this.  We can also set the default value of a column to be GETDATE() to achieve the same purpose.
 

        </font>

      </body>
    </html>
  </GETDATE>

  <SYSDATE>
    <html>
      <body>
        <h1>
SYSDATE
        </h1>

        <font size="5">
          <p/>
            The SYSDATE function is used to retrieve the current database system time in Oracle and MySQL.

            <p/>
              <b>Oracle</b>:

              <p/>
                The syntax of SYSDATE in Oracle is simply

                <p/>
                  <b>
                    <font>SYSDATE</font>
                  </b>

                  <p/>
                    It does not require any argument.

                    <p/>
                      Example:  The SQL statement

                      <p/>
                        <b>
                          <font >SELECT SYSDATE FROM DUAL;</font>
                        </b>

                        <p/>
                          yields the following result:

                          <p/>
                            <b>
                              <font>'16-JAN-2000'</font>
                            </b>

                            <p/>
                              <b>MySQL</b>:

                              <p/>
                                The syntax of SYSDATE in MySQL is simply

                                <p/>
                                  <b>
                                    <font>SYSDATE()</font>
                                  </b>

                                  <p/>
                                    It does not require any argument.

                                    <p/>
                                      Example:  The SQL statement

                                      <p/>
                                        <b>
                                          <font >SELECT SYSDATE();</font>
                                        </b>

                                        <p/>
                                          yields the following result:

                                          <p/>
                                            <b>
                                              <font >'2000-01-16 09:06:22'</font>
                                            </b>


                                          </font>

      </body>
    </html>
  </SYSDATE>
  
  
  
  
 </Books>